
Project_Robot_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008c6  0000095a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  0000095e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006db  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000340  00000000  00000000  0000116b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031d  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a0  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c3  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001f7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	6d c0       	rjmp	.+218    	; 0xde <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ec       	ldi	r30, 0xC6	; 198
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	9a d0       	rcall	.+308    	; 0x18e <main>
  5a:	33 c4       	rjmp	.+2150   	; 0x8c2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PORT_init>:

 #include "Main.h"

 void PORT_init(void)//инициализация портов ввода/вывода
 {
 DDRB|=(1<<PB4);
  5e:	bc 9a       	sbi	0x17, 4	; 23
 DDRB|=(1<<PB5);
  60:	bd 9a       	sbi	0x17, 5	; 23

 PORTB&=~(1<<PB4);
  62:	c4 98       	cbi	0x18, 4	; 24
 PORTB&=~(1<<PB5);
  64:	c5 98       	cbi	0x18, 5	; 24

 DDRB|=(1<<PB1);
  66:	b9 9a       	sbi	0x17, 1	; 23
 PORTB&=~(1<<PB1);
  68:	c1 98       	cbi	0x18, 1	; 24

 DDRB&=(1<<PB2);
  6a:	87 b3       	in	r24, 0x17	; 23
  6c:	84 70       	andi	r24, 0x04	; 4
  6e:	87 bb       	out	0x17, r24	; 23
 PORTB|=(1<<PB2);
  70:	c2 9a       	sbi	0x18, 2	; 24

 

 DDRB&=~(1<<PB0);
  72:	b8 98       	cbi	0x17, 0	; 23
 PORTB|=(1<<PB0);
  74:	c0 9a       	sbi	0x18, 0	; 24

 DDRD|=(1<<PD0);
  76:	88 9a       	sbi	0x11, 0	; 17
 DDRD|=(1<<PD1);
  78:	89 9a       	sbi	0x11, 1	; 17

 DDRD|=(1<<PD3);
  7a:	8b 9a       	sbi	0x11, 3	; 17
 DDRD|=(1<<PD4);
  7c:	8c 9a       	sbi	0x11, 4	; 17
 DDRD|=(1<<PD5);
  7e:	8d 9a       	sbi	0x11, 5	; 17
 DDRD|=(1<<PD6);
  80:	8e 9a       	sbi	0x11, 6	; 17


 PORTD|=(1<<PD0);
  82:	90 9a       	sbi	0x12, 0	; 18
 
 PORTD&=~(1<<PD3);
  84:	93 98       	cbi	0x12, 3	; 18
 PORTD&=~(1<<PD4);
  86:	94 98       	cbi	0x12, 4	; 18
 PORTD&=~(1<<PD5);
  88:	95 98       	cbi	0x12, 5	; 18
 PORTD&=~(1<<PD6);
  8a:	96 98       	cbi	0x12, 6	; 18
 

 DDRC=0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	84 bb       	out	0x14, r24	; 20
 PORTC=0x00;
  90:	15 ba       	out	0x15, r1	; 21
  92:	08 95       	ret

00000094 <HC_SR04_init>:



 void HC_SR04_init(void)//инициализация УЗ-датчика
 {
	 Trig_DDr|=1<<Trig_N;
  94:	8f 9a       	sbi	0x11, 7	; 17
	 Trig_Port&=~(1<<Trig_N);
  96:	97 98       	cbi	0x12, 7	; 18
	 
	 
	 Echo_ddr&=~(1<<Echo_N);
  98:	8a 98       	cbi	0x11, 2	; 17
	 Echo_Port&=~(1<<Echo_N);
  9a:	92 98       	cbi	0x12, 2	; 18
  9c:	08 95       	ret

0000009e <HC_SR04_Send_strob>:
 }


 void HC_SR04_Send_strob(void) // функция посылки стробирующего импульса
 {
	 Trig_Port|=(1<<Trig_N);
  9e:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	8a 95       	dec	r24
  a4:	f1 f7       	brne	.-4      	; 0xa2 <HC_SR04_Send_strob+0x4>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <HC_SR04_Send_strob+0xa>
	 _delay_us(20);
	 Trig_Port&=~(1<<Trig_N);
  a8:	97 98       	cbi	0x12, 7	; 18
  aa:	08 95       	ret

000000ac <init_interupt>:
	 
 }
 
 void init_interupt(void)//инициализация прерывания микроконтроллера
 {
	 MCUCR|=(1<<ISC00);
  ac:	85 b7       	in	r24, 0x35	; 53
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bf       	out	0x35, r24	; 53
	 GICR|=(1<<INT0);
  b2:	8b b7       	in	r24, 0x3b	; 59
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	8b bf       	out	0x3b, r24	; 59
  b8:	08 95       	ret

000000ba <timer_Start_stop>:
 
 unsigned int timer_Start_stop(char flag)//Функция запуска/остановки таймера/счетчика
 {
	 unsigned int rez;
	 
	 if (flag)
  ba:	88 23       	and	r24, r24
  bc:	31 f0       	breq	.+12     	; 0xca <timer_Start_stop+0x10>
	 {
		 TCNT1H=0;
  be:	1d bc       	out	0x2d, r1	; 45
		 TCNT1L=0;
  c0:	1c bc       	out	0x2c, r1	; 44
		 TCCR1B|=(1<<CS11);
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	8e bd       	out	0x2e, r24	; 46
  c8:	08 95       	ret
	 }
	 else{
		 TCCR1B&=~(1<<CS11);
  ca:	8e b5       	in	r24, 0x2e	; 46
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	8e bd       	out	0x2e, r24	; 46
		 rez=TCNT1H;
  d0:	8d b5       	in	r24, 0x2d	; 45
  d2:	90 e0       	ldi	r25, 0x00	; 0
		 rez<<=8;
  d4:	98 2f       	mov	r25, r24
  d6:	88 27       	eor	r24, r24
		 rez|=TCNT1L;
  d8:	2c b5       	in	r18, 0x2c	; 44
		 
		 
		 return rez;
  da:	82 2b       	or	r24, r18
		 
	 }
	 
	 
 }
  dc:	08 95       	ret

000000de <__vector_1>:
	 
 }
 unsigned int N_tack=0;

 ISR(INT0_vect) //прерывания по внешнему прерыванию
 {
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	 if (Echo_Pin&(1<<Echo_N))//запуск и остановка подсчета времени
 100:	82 9b       	sbis	0x10, 2	; 16
 102:	03 c0       	rjmp	.+6      	; 0x10a <__vector_1+0x2c>
	 {
		 timer_Start_stop(Start);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	d9 df       	rcall	.-78     	; 0xba <timer_Start_stop>
 108:	06 c0       	rjmp	.+12     	; 0x116 <__vector_1+0x38>
	 }
	 else
	 {
		 N_tack=timer_Start_stop(Stop);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	d6 df       	rcall	.-84     	; 0xba <timer_Start_stop>
 10e:	90 93 65 00 	sts	0x0065, r25
 112:	80 93 64 00 	sts	0x0064, r24
	 }
	 
 }
 116:	ff 91       	pop	r31
 118:	ef 91       	pop	r30
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	7f 91       	pop	r23
 124:	6f 91       	pop	r22
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <HC_SRC4_get_CM>:
 
 unsigned int HC_SRC4_get_CM(void)//получение данных о расстоянии
 {
	 HC_SR04_Send_strob();
 138:	b2 df       	rcall	.-156    	; 0x9e <HC_SR04_Send_strob>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	87 ea       	ldi	r24, 0xA7	; 167
 13c:	91 e6       	ldi	r25, 0x61	; 97
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <HC_SRC4_get_CM+0x6>
 142:	00 c0       	rjmp	.+0      	; 0x144 <HC_SRC4_get_CM+0xc>
 144:	00 00       	nop
 }
 
 unsigned int HC_SR04_Convert_CM(unsigned int N_t)//Преобразования приходящего импульса в число
 {
	 unsigned long int c;
	 c=N_t*8;
 146:	60 91 64 00 	lds	r22, 0x0064
 14a:	70 91 65 00 	lds	r23, 0x0065
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
	 c/=58;
 15e:	2a e3       	ldi	r18, 0x3A	; 58
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	c5 d0       	rcall	.+394    	; 0x2f2 <__udivmodsi4>
	 c+=1;
 168:	da 01       	movw	r26, r20
 16a:	c9 01       	movw	r24, r18
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	a1 1d       	adc	r26, r1
 170:	b1 1d       	adc	r27, r1
 {
	 HC_SR04_Send_strob();
	 _delay_ms(100);
	 return ( char)HC_SR04_Convert_CM(N_tack);
	 
 }
 172:	99 27       	eor	r25, r25
 174:	08 95       	ret

00000176 <Timer_init>:


 void Timer_init(void)//инициализация таймера для ШИМ
 {

 TCCR2|=(1<<WGM20)|(WGM21);
 176:	85 b5       	in	r24, 0x25	; 37
 178:	83 64       	ori	r24, 0x43	; 67
 17a:	85 bd       	out	0x25, r24	; 37
 TCCR2|=(1<<COM21);
 17c:	85 b5       	in	r24, 0x25	; 37
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	85 bd       	out	0x25, r24	; 37
 TCCR2|=(1<<CS21);
 182:	85 b5       	in	r24, 0x25	; 37
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 bd       	out	0x25, r24	; 37
 OCR2=1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	83 bd       	out	0x23, r24	; 35
 18c:	08 95       	ret

0000018e <main>:


 }

int main(void)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	c4 56       	subi	r28, 0x64	; 100
 198:	d1 09       	sbc	r29, r1
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
  char Buuf[100];//буффер для USART
  char flag_work=0;//флаг работы устройства
   char rasst=0;//переменная в которую помещяем значения от датчика
   PORT_init();//объявление функции инициализации портов ввода/вывода
 1a4:	5c df       	rcall	.-328    	; 0x5e <PORT_init>
   HC_SR04_init();//объявление функции инициализации уз-датчика
 1a6:	76 df       	rcall	.-276    	; 0x94 <HC_SR04_init>
    init_interupt();//объявление инициализации прерываний
 1a8:	81 df       	rcall	.-254    	; 0xac <init_interupt>
	sei();//разрешение глобальных прерываний
 1aa:	78 94       	sei
   USART_Init(UBRR_VAL);//объявление функции инициализации интерфейса USART
 1ac:	89 e1       	ldi	r24, 0x19	; 25
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	85 d0       	rcall	.+266    	; 0x2bc <USART_Init>
   Timer_init();//объявление функции работы таймера
 1b2:	e1 df       	rcall	.-62     	; 0x176 <Timer_init>
  
   
    USART_Transmit('c');//вывод данных на терминал
 1b4:	83 e6       	ldi	r24, 0x63	; 99
 1b6:	89 d0       	rcall	.+274    	; 0x2ca <USART_Transmit>
    USART_Transmit('o');//вывод данных на терминал
 1b8:	8f e6       	ldi	r24, 0x6F	; 111
 1ba:	87 d0       	rcall	.+270    	; 0x2ca <USART_Transmit>
    USART_Transmit('n');//вывод данных на терминал
 1bc:	8e e6       	ldi	r24, 0x6E	; 110
 1be:	85 d0       	rcall	.+266    	; 0x2ca <USART_Transmit>
    USART_Transmit('n');//вывод данных на терминал
 1c0:	8e e6       	ldi	r24, 0x6E	; 110
 1c2:	83 d0       	rcall	.+262    	; 0x2ca <USART_Transmit>
    USART_Transmit('e');//вывод данных на терминал
 1c4:	85 e6       	ldi	r24, 0x65	; 101
 1c6:	81 d0       	rcall	.+258    	; 0x2ca <USART_Transmit>
    USART_Transmit('k');//вывод данных на терминал
 1c8:	8b e6       	ldi	r24, 0x6B	; 107
 1ca:	7f d0       	rcall	.+254    	; 0x2ca <USART_Transmit>
    USART_Transmit('t');//вывод данных на терминал
 1cc:	84 e7       	ldi	r24, 0x74	; 116
 1ce:	7d d0       	rcall	.+250    	; 0x2ca <USART_Transmit>
    USART_Transmit(0x0d);
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	7b d0       	rcall	.+246    	; 0x2ca <USART_Transmit>
    USART_Transmit(0x0a);
 1d4:	8a e0       	ldi	r24, 0x0A	; 10
 1d6:	79 d0       	rcall	.+242    	; 0x2ca <USART_Transmit>
 }

int main(void)
{
  char Buuf[100];//буффер для USART
  char flag_work=0;//флаг работы устройства
 1d8:	d1 2c       	mov	r13, r1
	    while (1) 
    {
	
	rasst=HC_SRC4_get_CM();//присваиваем значение переменной 
	
 	sprintf (Buuf , "%u " , rasst-1);//передаем значение на терминал
 1da:	0f 2e       	mov	r0, r31
 1dc:	f0 e6       	ldi	r31, 0x60	; 96
 1de:	ef 2e       	mov	r14, r31
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ff 2e       	mov	r15, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	8e 01       	movw	r16, r28
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
	else{//если флаг не равен единице 
	
	PORTD&=~(1<<PD3);
	PORTD&=~(1<<PD5);
	PORTB&=~(1<<PB1);
	OCR2=15;
 1ec:	0f 2e       	mov	r0, r31
 1ee:	ff e0       	ldi	r31, 0x0F	; 15
 1f0:	cf 2e       	mov	r12, r31
 1f2:	f0 2d       	mov	r31, r0
		_delay_ms(100);
	}else{
	PORTD|=(1<<PD3);
	PORTD|=(1<<PD5);
	
	OCR2=130;//устанавливаем значение шим для перемещения
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f2 e8       	ldi	r31, 0x82	; 130
 1f8:	9f 2e       	mov	r9, r31
 1fa:	f0 2d       	mov	r31, r0
	if (!(PINB&(1<<PB2)))//сработал передний датчик
	{
		_delay_ms(100);
		PORTB&=~(1<<PB4);
		PORTD&=~(1<<PD3);
		OCR2=250;
 1fc:	0f 2e       	mov	r0, r31
 1fe:	fa ef       	ldi	r31, 0xFA	; 250
 200:	7f 2e       	mov	r7, r31
 202:	f0 2d       	mov	r31, r0
	PORTC&=~(1<<PC0);//включаем шетки и турбину
	PORTC&=~(1<<PC2);//включаем шетки и турбину

	}

	if (rasst<5)// если расстояние до препятствия меньше 5 см поварачиваем в левую сторону
 204:	68 94       	set
 206:	aa 24       	eor	r10, r10
 208:	a4 f8       	bld	r10, 4
 20a:	0f 2e       	mov	r0, r31
 20c:	f7 e2       	ldi	r31, 0x27	; 39
 20e:	bf 2e       	mov	r11, r31
 210:	f0 2d       	mov	r31, r0
    USART_Transmit(0x0d);
    USART_Transmit(0x0a);
	    while (1) 
    {
	
	rasst=HC_SRC4_get_CM();//присваиваем значение переменной 
 212:	92 df       	rcall	.-220    	; 0x138 <HC_SRC4_get_CM>
 214:	88 2e       	mov	r8, r24
 216:	99 27       	eor	r25, r25
	
 	sprintf (Buuf , "%u " , rasst-1);//передаем значение на терминал
 218:	9c 01       	movw	r18, r24
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	31 09       	sbc	r19, r1
 21e:	3f 93       	push	r19
 220:	2f 93       	push	r18
 222:	ff 92       	push	r15
 224:	ef 92       	push	r14
 226:	1f 93       	push	r17
 228:	0f 93       	push	r16
 22a:	85 d0       	rcall	.+266    	; 0x336 <sprintf>
 	Transmit_string(Buuf);//передаем значение на терминал
 22c:	c8 01       	movw	r24, r16
 22e:	51 d0       	rcall	.+162    	; 0x2d2 <Transmit_string>
 	USART_Transmit(0x0d);
 230:	8d e0       	ldi	r24, 0x0D	; 13
 232:	4b d0       	rcall	.+150    	; 0x2ca <USART_Transmit>
 	USART_Transmit(0x0a);
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	49 d0       	rcall	.+146    	; 0x2ca <USART_Transmit>
 	
	if (!(PINB&(1<<0)))//включена ли кнопка запуска
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	b0 99       	sbic	0x16, 0	; 22
 246:	07 c0       	rjmp	.+14     	; 0x256 <main+0xc8>
 248:	8f e4       	ldi	r24, 0x4F	; 79
 24a:	93 ec       	ldi	r25, 0xC3	; 195
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0xbe>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xc4>
 252:	00 00       	nop
	{
	_delay_ms(200);
	
	
		flag_work+=1;//устанавливаем флаг работы 
 254:	d3 94       	inc	r13
	}
		
		

	if (flag_work==1)//проверка условия флага работы
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	d9 12       	cpse	r13, r25
 25a:	1b c0       	rjmp	.+54     	; 0x292 <main+0x104>
			{	
			PORTB|=(1<<PB4);
 25c:	c4 9a       	sbi	0x18, 4	; 24
			PORTB|=(1<<PB5);			
 25e:	c5 9a       	sbi	0x18, 5	; 24
	PORTB|=(1<<PB1);//включаем шетки и турбину
 260:	c1 9a       	sbi	0x18, 1	; 24
	PORTC|=(1<<PC0);//включаем шетки и турбину
 262:	a8 9a       	sbi	0x15, 0	; 21
	PORTC|=(1<<PC2);//включаем шетки и турбину
 264:	aa 9a       	sbi	0x15, 2	; 21
	if (!(PINB&(1<<PB2)))//сработал передний датчик
 266:	b2 99       	sbic	0x16, 2	; 22
 268:	10 c0       	rjmp	.+32     	; 0x28a <main+0xfc>
 26a:	87 ea       	ldi	r24, 0xA7	; 167
 26c:	91 e6       	ldi	r25, 0x61	; 97
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0xe0>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0xe6>
 274:	00 00       	nop
	{
		_delay_ms(100);
		PORTB&=~(1<<PB4);
 276:	c4 98       	cbi	0x18, 4	; 24
		PORTD&=~(1<<PD3);
 278:	93 98       	cbi	0x12, 3	; 18
		OCR2=250;
 27a:	73 bc       	out	0x23, r7	; 35
 27c:	87 ea       	ldi	r24, 0xA7	; 167
 27e:	91 e6       	ldi	r25, 0x61	; 97
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0xf2>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0xf8>
 286:	00 00       	nop
 288:	15 c0       	rjmp	.+42     	; 0x2b4 <main+0x126>
		_delay_ms(100);
	}else{
	PORTD|=(1<<PD3);
 28a:	93 9a       	sbi	0x12, 3	; 18
	PORTD|=(1<<PD5);
 28c:	95 9a       	sbi	0x12, 5	; 18
	
	OCR2=130;//устанавливаем значение шим для перемещения
 28e:	93 bc       	out	0x23, r9	; 35
 290:	11 c0       	rjmp	.+34     	; 0x2b4 <main+0x126>
	
	}
			}
	else{//если флаг не равен единице 
	
	PORTD&=~(1<<PD3);
 292:	93 98       	cbi	0x12, 3	; 18
	PORTD&=~(1<<PD5);
 294:	95 98       	cbi	0x12, 5	; 18
	PORTB&=~(1<<PB1);
 296:	c1 98       	cbi	0x18, 1	; 24
	OCR2=15;
 298:	c3 bc       	out	0x23, r12	; 35

	PORTB&=~(1<<PB1);//включаем шетки и турбину
 29a:	c1 98       	cbi	0x18, 1	; 24
	PORTC&=~(1<<PC0);//включаем шетки и турбину
 29c:	a8 98       	cbi	0x15, 0	; 21
	PORTC&=~(1<<PC2);//включаем шетки и турбину
 29e:	aa 98       	cbi	0x15, 2	; 21
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <main+0x126>

	}

	if (rasst<5)// если расстояние до препятствия меньше 5 см поварачиваем в левую сторону
 2a2:	2a 2d       	mov	r18, r10
 2a4:	3b 2d       	mov	r19, r11
	{
		for (int i=0;i<10000;i++)
		{
		PORTD&=~(1<<PD3);
 2a6:	93 98       	cbi	0x12, 3	; 18
		PORTB&=~(1<<PB4);
 2a8:	c4 98       	cbi	0x18, 4	; 24
		PORTB|=(1<<PB5);
 2aa:	c5 9a       	sbi	0x18, 5	; 24
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	31 09       	sbc	r19, r1

	}

	if (rasst<5)// если расстояние до препятствия меньше 5 см поварачиваем в левую сторону
	{
		for (int i=0;i<10000;i++)
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <main+0x118>
 2b2:	af cf       	rjmp	.-162    	; 0x212 <main+0x84>
	PORTC&=~(1<<PC0);//включаем шетки и турбину
	PORTC&=~(1<<PC2);//включаем шетки и турбину

	}

	if (rasst<5)// если расстояние до препятствия меньше 5 см поварачиваем в левую сторону
 2b4:	94 e0       	ldi	r25, 0x04	; 4
 2b6:	98 15       	cp	r25, r8
 2b8:	a0 f7       	brcc	.-24     	; 0x2a2 <main+0x114>
 2ba:	ab cf       	rjmp	.-170    	; 0x212 <main+0x84>

000002bc <USART_Init>:
#include "UART.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
	//Зададим скорость работы USART 115200
	UBRRH = (unsigned char)(ubrr>>8);
 2bc:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
 2be:	89 b9       	out	0x09, r24	; 9
	
	UCSRA = 0X00;
 2c0:	1b b8       	out	0x0b, r1	; 11
	UCSRB|=(1<<TXEN);// Разрешение работы приемника
 2c2:	53 9a       	sbi	0x0a, 3	; 10
	// Установка формата посылки: 8 бит данных, 1 стоп-бит
	UCSRC =(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
 2c4:	86 e8       	ldi	r24, 0x86	; 134
 2c6:	80 bd       	out	0x20, r24	; 32
 2c8:	08 95       	ret

000002ca <USART_Transmit>:
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	
	while ( !(UCSRA&(1<<UDRE))); 
 2ca:	5d 9b       	sbis	0x0b, 5	; 11
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <USART_Transmit>
	UDR = data; //Начало передачи данных
 2ce:	8c b9       	out	0x0c, r24	; 12
 2d0:	08 95       	ret

000002d2 <Transmit_string>:
	
} 

 void Transmit_string( char s[])
 {
 2d2:	dc 01       	movw	r26, r24
 char k;
 for (k=0;s[k]!=0;k++)
 2d4:	9c 91       	ld	r25, X
 2d6:	99 23       	and	r25, r25
 2d8:	59 f0       	breq	.+22     	; 0x2f0 <Transmit_string+0x1e>
 2da:	20 e0       	ldi	r18, 0x00	; 0
 {
 	UDR =s[k];
 2dc:	9c b9       	out	0x0c, r25	; 12
 	while ( !(UCSRA&(1<<UDRE)));//ждем окончания передачи
 2de:	5d 9b       	sbis	0x0b, 5	; 11
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <Transmit_string+0xc>
} 

 void Transmit_string( char s[])
 {
 char k;
 for (k=0;s[k]!=0;k++)
 2e2:	2f 5f       	subi	r18, 0xFF	; 255
 2e4:	fd 01       	movw	r30, r26
 2e6:	e2 0f       	add	r30, r18
 2e8:	f1 1d       	adc	r31, r1
 2ea:	90 81       	ld	r25, Z
 2ec:	91 11       	cpse	r25, r1
 2ee:	f6 cf       	rjmp	.-20     	; 0x2dc <Transmit_string+0xa>
 2f0:	08 95       	ret

000002f2 <__udivmodsi4>:
 2f2:	a1 e2       	ldi	r26, 0x21	; 33
 2f4:	1a 2e       	mov	r1, r26
 2f6:	aa 1b       	sub	r26, r26
 2f8:	bb 1b       	sub	r27, r27
 2fa:	fd 01       	movw	r30, r26
 2fc:	0d c0       	rjmp	.+26     	; 0x318 <__udivmodsi4_ep>

000002fe <__udivmodsi4_loop>:
 2fe:	aa 1f       	adc	r26, r26
 300:	bb 1f       	adc	r27, r27
 302:	ee 1f       	adc	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	a2 17       	cp	r26, r18
 308:	b3 07       	cpc	r27, r19
 30a:	e4 07       	cpc	r30, r20
 30c:	f5 07       	cpc	r31, r21
 30e:	20 f0       	brcs	.+8      	; 0x318 <__udivmodsi4_ep>
 310:	a2 1b       	sub	r26, r18
 312:	b3 0b       	sbc	r27, r19
 314:	e4 0b       	sbc	r30, r20
 316:	f5 0b       	sbc	r31, r21

00000318 <__udivmodsi4_ep>:
 318:	66 1f       	adc	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	1a 94       	dec	r1
 322:	69 f7       	brne	.-38     	; 0x2fe <__udivmodsi4_loop>
 324:	60 95       	com	r22
 326:	70 95       	com	r23
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	bd 01       	movw	r22, r26
 332:	cf 01       	movw	r24, r30
 334:	08 95       	ret

00000336 <sprintf>:
 336:	ae e0       	ldi	r26, 0x0E	; 14
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	e0 ea       	ldi	r30, 0xA0	; 160
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	98 c2       	rjmp	.+1328   	; 0x870 <__prologue_saves__+0x1c>
 340:	0d 89       	ldd	r16, Y+21	; 0x15
 342:	1e 89       	ldd	r17, Y+22	; 0x16
 344:	86 e0       	ldi	r24, 0x06	; 6
 346:	8c 83       	std	Y+4, r24	; 0x04
 348:	1a 83       	std	Y+2, r17	; 0x02
 34a:	09 83       	std	Y+1, r16	; 0x01
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	9f e7       	ldi	r25, 0x7F	; 127
 350:	9e 83       	std	Y+6, r25	; 0x06
 352:	8d 83       	std	Y+5, r24	; 0x05
 354:	ae 01       	movw	r20, r28
 356:	47 5e       	subi	r20, 0xE7	; 231
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	6f 89       	ldd	r22, Y+23	; 0x17
 35c:	78 8d       	ldd	r23, Y+24	; 0x18
 35e:	ce 01       	movw	r24, r28
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	09 d0       	rcall	.+18     	; 0x376 <vfprintf>
 364:	2f 81       	ldd	r18, Y+7	; 0x07
 366:	38 85       	ldd	r19, Y+8	; 0x08
 368:	f8 01       	movw	r30, r16
 36a:	e2 0f       	add	r30, r18
 36c:	f3 1f       	adc	r31, r19
 36e:	10 82       	st	Z, r1
 370:	2e 96       	adiw	r28, 0x0e	; 14
 372:	e4 e0       	ldi	r30, 0x04	; 4
 374:	99 c2       	rjmp	.+1330   	; 0x8a8 <__epilogue_restores__+0x1c>

00000376 <vfprintf>:
 376:	ac e0       	ldi	r26, 0x0C	; 12
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e0 ec       	ldi	r30, 0xC0	; 192
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	6a c2       	rjmp	.+1236   	; 0x854 <__prologue_saves__>
 380:	7c 01       	movw	r14, r24
 382:	6b 01       	movw	r12, r22
 384:	8a 01       	movw	r16, r20
 386:	fc 01       	movw	r30, r24
 388:	17 82       	std	Z+7, r1	; 0x07
 38a:	16 82       	std	Z+6, r1	; 0x06
 38c:	83 81       	ldd	r24, Z+3	; 0x03
 38e:	81 ff       	sbrs	r24, 1
 390:	b0 c1       	rjmp	.+864    	; 0x6f2 <__stack+0x293>
 392:	ce 01       	movw	r24, r28
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	4c 01       	movw	r8, r24
 398:	f7 01       	movw	r30, r14
 39a:	93 81       	ldd	r25, Z+3	; 0x03
 39c:	f6 01       	movw	r30, r12
 39e:	93 fd       	sbrc	r25, 3
 3a0:	85 91       	lpm	r24, Z+
 3a2:	93 ff       	sbrs	r25, 3
 3a4:	81 91       	ld	r24, Z+
 3a6:	6f 01       	movw	r12, r30
 3a8:	88 23       	and	r24, r24
 3aa:	09 f4       	brne	.+2      	; 0x3ae <vfprintf+0x38>
 3ac:	9e c1       	rjmp	.+828    	; 0x6ea <__stack+0x28b>
 3ae:	85 32       	cpi	r24, 0x25	; 37
 3b0:	39 f4       	brne	.+14     	; 0x3c0 <vfprintf+0x4a>
 3b2:	93 fd       	sbrc	r25, 3
 3b4:	85 91       	lpm	r24, Z+
 3b6:	93 ff       	sbrs	r25, 3
 3b8:	81 91       	ld	r24, Z+
 3ba:	6f 01       	movw	r12, r30
 3bc:	85 32       	cpi	r24, 0x25	; 37
 3be:	21 f4       	brne	.+8      	; 0x3c8 <vfprintf+0x52>
 3c0:	b7 01       	movw	r22, r14
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	b1 d1       	rcall	.+866    	; 0x728 <fputc>
 3c6:	e8 cf       	rjmp	.-48     	; 0x398 <vfprintf+0x22>
 3c8:	51 2c       	mov	r5, r1
 3ca:	31 2c       	mov	r3, r1
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	20 32       	cpi	r18, 0x20	; 32
 3d0:	a0 f4       	brcc	.+40     	; 0x3fa <vfprintf+0x84>
 3d2:	8b 32       	cpi	r24, 0x2B	; 43
 3d4:	69 f0       	breq	.+26     	; 0x3f0 <vfprintf+0x7a>
 3d6:	30 f4       	brcc	.+12     	; 0x3e4 <vfprintf+0x6e>
 3d8:	80 32       	cpi	r24, 0x20	; 32
 3da:	59 f0       	breq	.+22     	; 0x3f2 <vfprintf+0x7c>
 3dc:	83 32       	cpi	r24, 0x23	; 35
 3de:	69 f4       	brne	.+26     	; 0x3fa <vfprintf+0x84>
 3e0:	20 61       	ori	r18, 0x10	; 16
 3e2:	2c c0       	rjmp	.+88     	; 0x43c <vfprintf+0xc6>
 3e4:	8d 32       	cpi	r24, 0x2D	; 45
 3e6:	39 f0       	breq	.+14     	; 0x3f6 <vfprintf+0x80>
 3e8:	80 33       	cpi	r24, 0x30	; 48
 3ea:	39 f4       	brne	.+14     	; 0x3fa <vfprintf+0x84>
 3ec:	21 60       	ori	r18, 0x01	; 1
 3ee:	26 c0       	rjmp	.+76     	; 0x43c <vfprintf+0xc6>
 3f0:	22 60       	ori	r18, 0x02	; 2
 3f2:	24 60       	ori	r18, 0x04	; 4
 3f4:	23 c0       	rjmp	.+70     	; 0x43c <vfprintf+0xc6>
 3f6:	28 60       	ori	r18, 0x08	; 8
 3f8:	21 c0       	rjmp	.+66     	; 0x43c <vfprintf+0xc6>
 3fa:	27 fd       	sbrc	r18, 7
 3fc:	27 c0       	rjmp	.+78     	; 0x44c <vfprintf+0xd6>
 3fe:	30 ed       	ldi	r19, 0xD0	; 208
 400:	38 0f       	add	r19, r24
 402:	3a 30       	cpi	r19, 0x0A	; 10
 404:	78 f4       	brcc	.+30     	; 0x424 <vfprintf+0xae>
 406:	26 ff       	sbrs	r18, 6
 408:	06 c0       	rjmp	.+12     	; 0x416 <vfprintf+0xa0>
 40a:	fa e0       	ldi	r31, 0x0A	; 10
 40c:	5f 9e       	mul	r5, r31
 40e:	30 0d       	add	r19, r0
 410:	11 24       	eor	r1, r1
 412:	53 2e       	mov	r5, r19
 414:	13 c0       	rjmp	.+38     	; 0x43c <vfprintf+0xc6>
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	38 9e       	mul	r3, r24
 41a:	30 0d       	add	r19, r0
 41c:	11 24       	eor	r1, r1
 41e:	33 2e       	mov	r3, r19
 420:	20 62       	ori	r18, 0x20	; 32
 422:	0c c0       	rjmp	.+24     	; 0x43c <vfprintf+0xc6>
 424:	8e 32       	cpi	r24, 0x2E	; 46
 426:	21 f4       	brne	.+8      	; 0x430 <vfprintf+0xba>
 428:	26 fd       	sbrc	r18, 6
 42a:	5f c1       	rjmp	.+702    	; 0x6ea <__stack+0x28b>
 42c:	20 64       	ori	r18, 0x40	; 64
 42e:	06 c0       	rjmp	.+12     	; 0x43c <vfprintf+0xc6>
 430:	8c 36       	cpi	r24, 0x6C	; 108
 432:	11 f4       	brne	.+4      	; 0x438 <vfprintf+0xc2>
 434:	20 68       	ori	r18, 0x80	; 128
 436:	02 c0       	rjmp	.+4      	; 0x43c <vfprintf+0xc6>
 438:	88 36       	cpi	r24, 0x68	; 104
 43a:	41 f4       	brne	.+16     	; 0x44c <vfprintf+0xd6>
 43c:	f6 01       	movw	r30, r12
 43e:	93 fd       	sbrc	r25, 3
 440:	85 91       	lpm	r24, Z+
 442:	93 ff       	sbrs	r25, 3
 444:	81 91       	ld	r24, Z+
 446:	6f 01       	movw	r12, r30
 448:	81 11       	cpse	r24, r1
 44a:	c1 cf       	rjmp	.-126    	; 0x3ce <vfprintf+0x58>
 44c:	98 2f       	mov	r25, r24
 44e:	9f 7d       	andi	r25, 0xDF	; 223
 450:	95 54       	subi	r25, 0x45	; 69
 452:	93 30       	cpi	r25, 0x03	; 3
 454:	28 f4       	brcc	.+10     	; 0x460 <__stack+0x1>
 456:	0c 5f       	subi	r16, 0xFC	; 252
 458:	1f 4f       	sbci	r17, 0xFF	; 255
 45a:	ff e3       	ldi	r31, 0x3F	; 63
 45c:	f9 83       	std	Y+1, r31	; 0x01
 45e:	0d c0       	rjmp	.+26     	; 0x47a <__stack+0x1b>
 460:	83 36       	cpi	r24, 0x63	; 99
 462:	31 f0       	breq	.+12     	; 0x470 <__stack+0x11>
 464:	83 37       	cpi	r24, 0x73	; 115
 466:	71 f0       	breq	.+28     	; 0x484 <__stack+0x25>
 468:	83 35       	cpi	r24, 0x53	; 83
 46a:	09 f0       	breq	.+2      	; 0x46e <__stack+0xf>
 46c:	57 c0       	rjmp	.+174    	; 0x51c <__stack+0xbd>
 46e:	21 c0       	rjmp	.+66     	; 0x4b2 <__stack+0x53>
 470:	f8 01       	movw	r30, r16
 472:	80 81       	ld	r24, Z
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	0e 5f       	subi	r16, 0xFE	; 254
 478:	1f 4f       	sbci	r17, 0xFF	; 255
 47a:	44 24       	eor	r4, r4
 47c:	43 94       	inc	r4
 47e:	51 2c       	mov	r5, r1
 480:	54 01       	movw	r10, r8
 482:	14 c0       	rjmp	.+40     	; 0x4ac <__stack+0x4d>
 484:	38 01       	movw	r6, r16
 486:	f2 e0       	ldi	r31, 0x02	; 2
 488:	6f 0e       	add	r6, r31
 48a:	71 1c       	adc	r7, r1
 48c:	f8 01       	movw	r30, r16
 48e:	a0 80       	ld	r10, Z
 490:	b1 80       	ldd	r11, Z+1	; 0x01
 492:	26 ff       	sbrs	r18, 6
 494:	03 c0       	rjmp	.+6      	; 0x49c <__stack+0x3d>
 496:	65 2d       	mov	r22, r5
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__stack+0x41>
 49c:	6f ef       	ldi	r22, 0xFF	; 255
 49e:	7f ef       	ldi	r23, 0xFF	; 255
 4a0:	c5 01       	movw	r24, r10
 4a2:	2c 87       	std	Y+12, r18	; 0x0c
 4a4:	36 d1       	rcall	.+620    	; 0x712 <strnlen>
 4a6:	2c 01       	movw	r4, r24
 4a8:	83 01       	movw	r16, r6
 4aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 4ac:	2f 77       	andi	r18, 0x7F	; 127
 4ae:	22 2e       	mov	r2, r18
 4b0:	16 c0       	rjmp	.+44     	; 0x4de <__stack+0x7f>
 4b2:	38 01       	movw	r6, r16
 4b4:	f2 e0       	ldi	r31, 0x02	; 2
 4b6:	6f 0e       	add	r6, r31
 4b8:	71 1c       	adc	r7, r1
 4ba:	f8 01       	movw	r30, r16
 4bc:	a0 80       	ld	r10, Z
 4be:	b1 80       	ldd	r11, Z+1	; 0x01
 4c0:	26 ff       	sbrs	r18, 6
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <__stack+0x6b>
 4c4:	65 2d       	mov	r22, r5
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__stack+0x6f>
 4ca:	6f ef       	ldi	r22, 0xFF	; 255
 4cc:	7f ef       	ldi	r23, 0xFF	; 255
 4ce:	c5 01       	movw	r24, r10
 4d0:	2c 87       	std	Y+12, r18	; 0x0c
 4d2:	14 d1       	rcall	.+552    	; 0x6fc <strnlen_P>
 4d4:	2c 01       	movw	r4, r24
 4d6:	2c 85       	ldd	r18, Y+12	; 0x0c
 4d8:	20 68       	ori	r18, 0x80	; 128
 4da:	22 2e       	mov	r2, r18
 4dc:	83 01       	movw	r16, r6
 4de:	23 fc       	sbrc	r2, 3
 4e0:	19 c0       	rjmp	.+50     	; 0x514 <__stack+0xb5>
 4e2:	83 2d       	mov	r24, r3
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	48 16       	cp	r4, r24
 4e8:	59 06       	cpc	r5, r25
 4ea:	a0 f4       	brcc	.+40     	; 0x514 <__stack+0xb5>
 4ec:	b7 01       	movw	r22, r14
 4ee:	80 e2       	ldi	r24, 0x20	; 32
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	1a d1       	rcall	.+564    	; 0x728 <fputc>
 4f4:	3a 94       	dec	r3
 4f6:	f5 cf       	rjmp	.-22     	; 0x4e2 <__stack+0x83>
 4f8:	f5 01       	movw	r30, r10
 4fa:	27 fc       	sbrc	r2, 7
 4fc:	85 91       	lpm	r24, Z+
 4fe:	27 fe       	sbrs	r2, 7
 500:	81 91       	ld	r24, Z+
 502:	5f 01       	movw	r10, r30
 504:	b7 01       	movw	r22, r14
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0f d1       	rcall	.+542    	; 0x728 <fputc>
 50a:	31 10       	cpse	r3, r1
 50c:	3a 94       	dec	r3
 50e:	f1 e0       	ldi	r31, 0x01	; 1
 510:	4f 1a       	sub	r4, r31
 512:	51 08       	sbc	r5, r1
 514:	41 14       	cp	r4, r1
 516:	51 04       	cpc	r5, r1
 518:	79 f7       	brne	.-34     	; 0x4f8 <__stack+0x99>
 51a:	de c0       	rjmp	.+444    	; 0x6d8 <__stack+0x279>
 51c:	84 36       	cpi	r24, 0x64	; 100
 51e:	11 f0       	breq	.+4      	; 0x524 <__stack+0xc5>
 520:	89 36       	cpi	r24, 0x69	; 105
 522:	31 f5       	brne	.+76     	; 0x570 <__stack+0x111>
 524:	f8 01       	movw	r30, r16
 526:	27 ff       	sbrs	r18, 7
 528:	07 c0       	rjmp	.+14     	; 0x538 <__stack+0xd9>
 52a:	60 81       	ld	r22, Z
 52c:	71 81       	ldd	r23, Z+1	; 0x01
 52e:	82 81       	ldd	r24, Z+2	; 0x02
 530:	93 81       	ldd	r25, Z+3	; 0x03
 532:	0c 5f       	subi	r16, 0xFC	; 252
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	08 c0       	rjmp	.+16     	; 0x548 <__stack+0xe9>
 538:	60 81       	ld	r22, Z
 53a:	71 81       	ldd	r23, Z+1	; 0x01
 53c:	07 2e       	mov	r0, r23
 53e:	00 0c       	add	r0, r0
 540:	88 0b       	sbc	r24, r24
 542:	99 0b       	sbc	r25, r25
 544:	0e 5f       	subi	r16, 0xFE	; 254
 546:	1f 4f       	sbci	r17, 0xFF	; 255
 548:	2f 76       	andi	r18, 0x6F	; 111
 54a:	72 2e       	mov	r7, r18
 54c:	97 ff       	sbrs	r25, 7
 54e:	09 c0       	rjmp	.+18     	; 0x562 <__stack+0x103>
 550:	90 95       	com	r25
 552:	80 95       	com	r24
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	20 68       	ori	r18, 0x80	; 128
 560:	72 2e       	mov	r7, r18
 562:	2a e0       	ldi	r18, 0x0A	; 10
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	a4 01       	movw	r20, r8
 568:	17 d1       	rcall	.+558    	; 0x798 <__ultoa_invert>
 56a:	a8 2e       	mov	r10, r24
 56c:	a8 18       	sub	r10, r8
 56e:	43 c0       	rjmp	.+134    	; 0x5f6 <__stack+0x197>
 570:	85 37       	cpi	r24, 0x75	; 117
 572:	29 f4       	brne	.+10     	; 0x57e <__stack+0x11f>
 574:	2f 7e       	andi	r18, 0xEF	; 239
 576:	b2 2e       	mov	r11, r18
 578:	2a e0       	ldi	r18, 0x0A	; 10
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	25 c0       	rjmp	.+74     	; 0x5c8 <__stack+0x169>
 57e:	f2 2f       	mov	r31, r18
 580:	f9 7f       	andi	r31, 0xF9	; 249
 582:	bf 2e       	mov	r11, r31
 584:	8f 36       	cpi	r24, 0x6F	; 111
 586:	c1 f0       	breq	.+48     	; 0x5b8 <__stack+0x159>
 588:	18 f4       	brcc	.+6      	; 0x590 <__stack+0x131>
 58a:	88 35       	cpi	r24, 0x58	; 88
 58c:	79 f0       	breq	.+30     	; 0x5ac <__stack+0x14d>
 58e:	ad c0       	rjmp	.+346    	; 0x6ea <__stack+0x28b>
 590:	80 37       	cpi	r24, 0x70	; 112
 592:	19 f0       	breq	.+6      	; 0x59a <__stack+0x13b>
 594:	88 37       	cpi	r24, 0x78	; 120
 596:	21 f0       	breq	.+8      	; 0x5a0 <__stack+0x141>
 598:	a8 c0       	rjmp	.+336    	; 0x6ea <__stack+0x28b>
 59a:	2f 2f       	mov	r18, r31
 59c:	20 61       	ori	r18, 0x10	; 16
 59e:	b2 2e       	mov	r11, r18
 5a0:	b4 fe       	sbrs	r11, 4
 5a2:	0d c0       	rjmp	.+26     	; 0x5be <__stack+0x15f>
 5a4:	8b 2d       	mov	r24, r11
 5a6:	84 60       	ori	r24, 0x04	; 4
 5a8:	b8 2e       	mov	r11, r24
 5aa:	09 c0       	rjmp	.+18     	; 0x5be <__stack+0x15f>
 5ac:	24 ff       	sbrs	r18, 4
 5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <__stack+0x165>
 5b0:	9f 2f       	mov	r25, r31
 5b2:	96 60       	ori	r25, 0x06	; 6
 5b4:	b9 2e       	mov	r11, r25
 5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <__stack+0x165>
 5b8:	28 e0       	ldi	r18, 0x08	; 8
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <__stack+0x169>
 5be:	20 e1       	ldi	r18, 0x10	; 16
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <__stack+0x169>
 5c4:	20 e1       	ldi	r18, 0x10	; 16
 5c6:	32 e0       	ldi	r19, 0x02	; 2
 5c8:	f8 01       	movw	r30, r16
 5ca:	b7 fe       	sbrs	r11, 7
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <__stack+0x17d>
 5ce:	60 81       	ld	r22, Z
 5d0:	71 81       	ldd	r23, Z+1	; 0x01
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	93 81       	ldd	r25, Z+3	; 0x03
 5d6:	0c 5f       	subi	r16, 0xFC	; 252
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	06 c0       	rjmp	.+12     	; 0x5e8 <__stack+0x189>
 5dc:	60 81       	ld	r22, Z
 5de:	71 81       	ldd	r23, Z+1	; 0x01
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 5f       	subi	r16, 0xFE	; 254
 5e6:	1f 4f       	sbci	r17, 0xFF	; 255
 5e8:	a4 01       	movw	r20, r8
 5ea:	d6 d0       	rcall	.+428    	; 0x798 <__ultoa_invert>
 5ec:	a8 2e       	mov	r10, r24
 5ee:	a8 18       	sub	r10, r8
 5f0:	fb 2d       	mov	r31, r11
 5f2:	ff 77       	andi	r31, 0x7F	; 127
 5f4:	7f 2e       	mov	r7, r31
 5f6:	76 fe       	sbrs	r7, 6
 5f8:	0b c0       	rjmp	.+22     	; 0x610 <__stack+0x1b1>
 5fa:	37 2d       	mov	r19, r7
 5fc:	3e 7f       	andi	r19, 0xFE	; 254
 5fe:	a5 14       	cp	r10, r5
 600:	50 f4       	brcc	.+20     	; 0x616 <__stack+0x1b7>
 602:	74 fe       	sbrs	r7, 4
 604:	0a c0       	rjmp	.+20     	; 0x61a <__stack+0x1bb>
 606:	72 fc       	sbrc	r7, 2
 608:	08 c0       	rjmp	.+16     	; 0x61a <__stack+0x1bb>
 60a:	37 2d       	mov	r19, r7
 60c:	3e 7e       	andi	r19, 0xEE	; 238
 60e:	05 c0       	rjmp	.+10     	; 0x61a <__stack+0x1bb>
 610:	ba 2c       	mov	r11, r10
 612:	37 2d       	mov	r19, r7
 614:	03 c0       	rjmp	.+6      	; 0x61c <__stack+0x1bd>
 616:	ba 2c       	mov	r11, r10
 618:	01 c0       	rjmp	.+2      	; 0x61c <__stack+0x1bd>
 61a:	b5 2c       	mov	r11, r5
 61c:	34 ff       	sbrs	r19, 4
 61e:	0d c0       	rjmp	.+26     	; 0x63a <__stack+0x1db>
 620:	fe 01       	movw	r30, r28
 622:	ea 0d       	add	r30, r10
 624:	f1 1d       	adc	r31, r1
 626:	80 81       	ld	r24, Z
 628:	80 33       	cpi	r24, 0x30	; 48
 62a:	11 f4       	brne	.+4      	; 0x630 <__stack+0x1d1>
 62c:	39 7e       	andi	r19, 0xE9	; 233
 62e:	09 c0       	rjmp	.+18     	; 0x642 <__stack+0x1e3>
 630:	32 ff       	sbrs	r19, 2
 632:	06 c0       	rjmp	.+12     	; 0x640 <__stack+0x1e1>
 634:	b3 94       	inc	r11
 636:	b3 94       	inc	r11
 638:	04 c0       	rjmp	.+8      	; 0x642 <__stack+0x1e3>
 63a:	83 2f       	mov	r24, r19
 63c:	86 78       	andi	r24, 0x86	; 134
 63e:	09 f0       	breq	.+2      	; 0x642 <__stack+0x1e3>
 640:	b3 94       	inc	r11
 642:	33 fd       	sbrc	r19, 3
 644:	12 c0       	rjmp	.+36     	; 0x66a <__stack+0x20b>
 646:	30 ff       	sbrs	r19, 0
 648:	06 c0       	rjmp	.+12     	; 0x656 <__stack+0x1f7>
 64a:	5a 2c       	mov	r5, r10
 64c:	b3 14       	cp	r11, r3
 64e:	18 f4       	brcc	.+6      	; 0x656 <__stack+0x1f7>
 650:	53 0c       	add	r5, r3
 652:	5b 18       	sub	r5, r11
 654:	b3 2c       	mov	r11, r3
 656:	b3 14       	cp	r11, r3
 658:	60 f4       	brcc	.+24     	; 0x672 <__stack+0x213>
 65a:	b7 01       	movw	r22, r14
 65c:	80 e2       	ldi	r24, 0x20	; 32
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	3c 87       	std	Y+12, r19	; 0x0c
 662:	62 d0       	rcall	.+196    	; 0x728 <fputc>
 664:	b3 94       	inc	r11
 666:	3c 85       	ldd	r19, Y+12	; 0x0c
 668:	f6 cf       	rjmp	.-20     	; 0x656 <__stack+0x1f7>
 66a:	b3 14       	cp	r11, r3
 66c:	10 f4       	brcc	.+4      	; 0x672 <__stack+0x213>
 66e:	3b 18       	sub	r3, r11
 670:	01 c0       	rjmp	.+2      	; 0x674 <__stack+0x215>
 672:	31 2c       	mov	r3, r1
 674:	34 ff       	sbrs	r19, 4
 676:	11 c0       	rjmp	.+34     	; 0x69a <__stack+0x23b>
 678:	b7 01       	movw	r22, r14
 67a:	80 e3       	ldi	r24, 0x30	; 48
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	3c 87       	std	Y+12, r19	; 0x0c
 680:	53 d0       	rcall	.+166    	; 0x728 <fputc>
 682:	3c 85       	ldd	r19, Y+12	; 0x0c
 684:	32 ff       	sbrs	r19, 2
 686:	16 c0       	rjmp	.+44     	; 0x6b4 <__stack+0x255>
 688:	31 fd       	sbrc	r19, 1
 68a:	03 c0       	rjmp	.+6      	; 0x692 <__stack+0x233>
 68c:	88 e7       	ldi	r24, 0x78	; 120
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <__stack+0x237>
 692:	88 e5       	ldi	r24, 0x58	; 88
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	b7 01       	movw	r22, r14
 698:	0c c0       	rjmp	.+24     	; 0x6b2 <__stack+0x253>
 69a:	83 2f       	mov	r24, r19
 69c:	86 78       	andi	r24, 0x86	; 134
 69e:	51 f0       	breq	.+20     	; 0x6b4 <__stack+0x255>
 6a0:	31 ff       	sbrs	r19, 1
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <__stack+0x249>
 6a4:	8b e2       	ldi	r24, 0x2B	; 43
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <__stack+0x24b>
 6a8:	80 e2       	ldi	r24, 0x20	; 32
 6aa:	37 fd       	sbrc	r19, 7
 6ac:	8d e2       	ldi	r24, 0x2D	; 45
 6ae:	b7 01       	movw	r22, r14
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	3a d0       	rcall	.+116    	; 0x728 <fputc>
 6b4:	a5 14       	cp	r10, r5
 6b6:	30 f4       	brcc	.+12     	; 0x6c4 <__stack+0x265>
 6b8:	b7 01       	movw	r22, r14
 6ba:	80 e3       	ldi	r24, 0x30	; 48
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	34 d0       	rcall	.+104    	; 0x728 <fputc>
 6c0:	5a 94       	dec	r5
 6c2:	f8 cf       	rjmp	.-16     	; 0x6b4 <__stack+0x255>
 6c4:	aa 94       	dec	r10
 6c6:	f4 01       	movw	r30, r8
 6c8:	ea 0d       	add	r30, r10
 6ca:	f1 1d       	adc	r31, r1
 6cc:	80 81       	ld	r24, Z
 6ce:	b7 01       	movw	r22, r14
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	2a d0       	rcall	.+84     	; 0x728 <fputc>
 6d4:	a1 10       	cpse	r10, r1
 6d6:	f6 cf       	rjmp	.-20     	; 0x6c4 <__stack+0x265>
 6d8:	33 20       	and	r3, r3
 6da:	09 f4       	brne	.+2      	; 0x6de <__stack+0x27f>
 6dc:	5d ce       	rjmp	.-838    	; 0x398 <vfprintf+0x22>
 6de:	b7 01       	movw	r22, r14
 6e0:	80 e2       	ldi	r24, 0x20	; 32
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	21 d0       	rcall	.+66     	; 0x728 <fputc>
 6e6:	3a 94       	dec	r3
 6e8:	f7 cf       	rjmp	.-18     	; 0x6d8 <__stack+0x279>
 6ea:	f7 01       	movw	r30, r14
 6ec:	86 81       	ldd	r24, Z+6	; 0x06
 6ee:	97 81       	ldd	r25, Z+7	; 0x07
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <__stack+0x297>
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	2c 96       	adiw	r28, 0x0c	; 12
 6f8:	e2 e1       	ldi	r30, 0x12	; 18
 6fa:	c8 c0       	rjmp	.+400    	; 0x88c <__epilogue_restores__>

000006fc <strnlen_P>:
 6fc:	fc 01       	movw	r30, r24
 6fe:	05 90       	lpm	r0, Z+
 700:	61 50       	subi	r22, 0x01	; 1
 702:	70 40       	sbci	r23, 0x00	; 0
 704:	01 10       	cpse	r0, r1
 706:	d8 f7       	brcc	.-10     	; 0x6fe <strnlen_P+0x2>
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	8e 0f       	add	r24, r30
 70e:	9f 1f       	adc	r25, r31
 710:	08 95       	ret

00000712 <strnlen>:
 712:	fc 01       	movw	r30, r24
 714:	61 50       	subi	r22, 0x01	; 1
 716:	70 40       	sbci	r23, 0x00	; 0
 718:	01 90       	ld	r0, Z+
 71a:	01 10       	cpse	r0, r1
 71c:	d8 f7       	brcc	.-10     	; 0x714 <strnlen+0x2>
 71e:	80 95       	com	r24
 720:	90 95       	com	r25
 722:	8e 0f       	add	r24, r30
 724:	9f 1f       	adc	r25, r31
 726:	08 95       	ret

00000728 <fputc>:
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	fb 01       	movw	r30, r22
 732:	23 81       	ldd	r18, Z+3	; 0x03
 734:	21 fd       	sbrc	r18, 1
 736:	03 c0       	rjmp	.+6      	; 0x73e <fputc+0x16>
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	9f ef       	ldi	r25, 0xFF	; 255
 73c:	28 c0       	rjmp	.+80     	; 0x78e <fputc+0x66>
 73e:	22 ff       	sbrs	r18, 2
 740:	16 c0       	rjmp	.+44     	; 0x76e <fputc+0x46>
 742:	46 81       	ldd	r20, Z+6	; 0x06
 744:	57 81       	ldd	r21, Z+7	; 0x07
 746:	24 81       	ldd	r18, Z+4	; 0x04
 748:	35 81       	ldd	r19, Z+5	; 0x05
 74a:	42 17       	cp	r20, r18
 74c:	53 07       	cpc	r21, r19
 74e:	44 f4       	brge	.+16     	; 0x760 <fputc+0x38>
 750:	a0 81       	ld	r26, Z
 752:	b1 81       	ldd	r27, Z+1	; 0x01
 754:	9d 01       	movw	r18, r26
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	3f 4f       	sbci	r19, 0xFF	; 255
 75a:	31 83       	std	Z+1, r19	; 0x01
 75c:	20 83       	st	Z, r18
 75e:	8c 93       	st	X, r24
 760:	26 81       	ldd	r18, Z+6	; 0x06
 762:	37 81       	ldd	r19, Z+7	; 0x07
 764:	2f 5f       	subi	r18, 0xFF	; 255
 766:	3f 4f       	sbci	r19, 0xFF	; 255
 768:	37 83       	std	Z+7, r19	; 0x07
 76a:	26 83       	std	Z+6, r18	; 0x06
 76c:	10 c0       	rjmp	.+32     	; 0x78e <fputc+0x66>
 76e:	eb 01       	movw	r28, r22
 770:	09 2f       	mov	r16, r25
 772:	18 2f       	mov	r17, r24
 774:	00 84       	ldd	r0, Z+8	; 0x08
 776:	f1 85       	ldd	r31, Z+9	; 0x09
 778:	e0 2d       	mov	r30, r0
 77a:	09 95       	icall
 77c:	89 2b       	or	r24, r25
 77e:	e1 f6       	brne	.-72     	; 0x738 <fputc+0x10>
 780:	8e 81       	ldd	r24, Y+6	; 0x06
 782:	9f 81       	ldd	r25, Y+7	; 0x07
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	9f 83       	std	Y+7, r25	; 0x07
 788:	8e 83       	std	Y+6, r24	; 0x06
 78a:	81 2f       	mov	r24, r17
 78c:	90 2f       	mov	r25, r16
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	1f 91       	pop	r17
 794:	0f 91       	pop	r16
 796:	08 95       	ret

00000798 <__ultoa_invert>:
 798:	fa 01       	movw	r30, r20
 79a:	aa 27       	eor	r26, r26
 79c:	28 30       	cpi	r18, 0x08	; 8
 79e:	51 f1       	breq	.+84     	; 0x7f4 <__ultoa_invert+0x5c>
 7a0:	20 31       	cpi	r18, 0x10	; 16
 7a2:	81 f1       	breq	.+96     	; 0x804 <__ultoa_invert+0x6c>
 7a4:	e8 94       	clt
 7a6:	6f 93       	push	r22
 7a8:	6e 7f       	andi	r22, 0xFE	; 254
 7aa:	6e 5f       	subi	r22, 0xFE	; 254
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	af 4f       	sbci	r26, 0xFF	; 255
 7b4:	b1 e0       	ldi	r27, 0x01	; 1
 7b6:	3e d0       	rcall	.+124    	; 0x834 <__ultoa_invert+0x9c>
 7b8:	b4 e0       	ldi	r27, 0x04	; 4
 7ba:	3c d0       	rcall	.+120    	; 0x834 <__ultoa_invert+0x9c>
 7bc:	67 0f       	add	r22, r23
 7be:	78 1f       	adc	r23, r24
 7c0:	89 1f       	adc	r24, r25
 7c2:	9a 1f       	adc	r25, r26
 7c4:	a1 1d       	adc	r26, r1
 7c6:	68 0f       	add	r22, r24
 7c8:	79 1f       	adc	r23, r25
 7ca:	8a 1f       	adc	r24, r26
 7cc:	91 1d       	adc	r25, r1
 7ce:	a1 1d       	adc	r26, r1
 7d0:	6a 0f       	add	r22, r26
 7d2:	71 1d       	adc	r23, r1
 7d4:	81 1d       	adc	r24, r1
 7d6:	91 1d       	adc	r25, r1
 7d8:	a1 1d       	adc	r26, r1
 7da:	20 d0       	rcall	.+64     	; 0x81c <__ultoa_invert+0x84>
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <__ultoa_invert+0x48>
 7de:	68 94       	set
 7e0:	3f 91       	pop	r19
 7e2:	2a e0       	ldi	r18, 0x0A	; 10
 7e4:	26 9f       	mul	r18, r22
 7e6:	11 24       	eor	r1, r1
 7e8:	30 19       	sub	r19, r0
 7ea:	30 5d       	subi	r19, 0xD0	; 208
 7ec:	31 93       	st	Z+, r19
 7ee:	de f6       	brtc	.-74     	; 0x7a6 <__ultoa_invert+0xe>
 7f0:	cf 01       	movw	r24, r30
 7f2:	08 95       	ret
 7f4:	46 2f       	mov	r20, r22
 7f6:	47 70       	andi	r20, 0x07	; 7
 7f8:	40 5d       	subi	r20, 0xD0	; 208
 7fa:	41 93       	st	Z+, r20
 7fc:	b3 e0       	ldi	r27, 0x03	; 3
 7fe:	0f d0       	rcall	.+30     	; 0x81e <__ultoa_invert+0x86>
 800:	c9 f7       	brne	.-14     	; 0x7f4 <__ultoa_invert+0x5c>
 802:	f6 cf       	rjmp	.-20     	; 0x7f0 <__ultoa_invert+0x58>
 804:	46 2f       	mov	r20, r22
 806:	4f 70       	andi	r20, 0x0F	; 15
 808:	40 5d       	subi	r20, 0xD0	; 208
 80a:	4a 33       	cpi	r20, 0x3A	; 58
 80c:	18 f0       	brcs	.+6      	; 0x814 <__ultoa_invert+0x7c>
 80e:	49 5d       	subi	r20, 0xD9	; 217
 810:	31 fd       	sbrc	r19, 1
 812:	40 52       	subi	r20, 0x20	; 32
 814:	41 93       	st	Z+, r20
 816:	02 d0       	rcall	.+4      	; 0x81c <__ultoa_invert+0x84>
 818:	a9 f7       	brne	.-22     	; 0x804 <__ultoa_invert+0x6c>
 81a:	ea cf       	rjmp	.-44     	; 0x7f0 <__ultoa_invert+0x58>
 81c:	b4 e0       	ldi	r27, 0x04	; 4
 81e:	a6 95       	lsr	r26
 820:	97 95       	ror	r25
 822:	87 95       	ror	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	ba 95       	dec	r27
 82a:	c9 f7       	brne	.-14     	; 0x81e <__ultoa_invert+0x86>
 82c:	00 97       	sbiw	r24, 0x00	; 0
 82e:	61 05       	cpc	r22, r1
 830:	71 05       	cpc	r23, r1
 832:	08 95       	ret
 834:	9b 01       	movw	r18, r22
 836:	ac 01       	movw	r20, r24
 838:	0a 2e       	mov	r0, r26
 83a:	06 94       	lsr	r0
 83c:	57 95       	ror	r21
 83e:	47 95       	ror	r20
 840:	37 95       	ror	r19
 842:	27 95       	ror	r18
 844:	ba 95       	dec	r27
 846:	c9 f7       	brne	.-14     	; 0x83a <__ultoa_invert+0xa2>
 848:	62 0f       	add	r22, r18
 84a:	73 1f       	adc	r23, r19
 84c:	84 1f       	adc	r24, r20
 84e:	95 1f       	adc	r25, r21
 850:	a0 1d       	adc	r26, r0
 852:	08 95       	ret

00000854 <__prologue_saves__>:
 854:	2f 92       	push	r2
 856:	3f 92       	push	r3
 858:	4f 92       	push	r4
 85a:	5f 92       	push	r5
 85c:	6f 92       	push	r6
 85e:	7f 92       	push	r7
 860:	8f 92       	push	r8
 862:	9f 92       	push	r9
 864:	af 92       	push	r10
 866:	bf 92       	push	r11
 868:	cf 92       	push	r12
 86a:	df 92       	push	r13
 86c:	ef 92       	push	r14
 86e:	ff 92       	push	r15
 870:	0f 93       	push	r16
 872:	1f 93       	push	r17
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
 87c:	ca 1b       	sub	r28, r26
 87e:	db 0b       	sbc	r29, r27
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	09 94       	ijmp

0000088c <__epilogue_restores__>:
 88c:	2a 88       	ldd	r2, Y+18	; 0x12
 88e:	39 88       	ldd	r3, Y+17	; 0x11
 890:	48 88       	ldd	r4, Y+16	; 0x10
 892:	5f 84       	ldd	r5, Y+15	; 0x0f
 894:	6e 84       	ldd	r6, Y+14	; 0x0e
 896:	7d 84       	ldd	r7, Y+13	; 0x0d
 898:	8c 84       	ldd	r8, Y+12	; 0x0c
 89a:	9b 84       	ldd	r9, Y+11	; 0x0b
 89c:	aa 84       	ldd	r10, Y+10	; 0x0a
 89e:	b9 84       	ldd	r11, Y+9	; 0x09
 8a0:	c8 84       	ldd	r12, Y+8	; 0x08
 8a2:	df 80       	ldd	r13, Y+7	; 0x07
 8a4:	ee 80       	ldd	r14, Y+6	; 0x06
 8a6:	fd 80       	ldd	r15, Y+5	; 0x05
 8a8:	0c 81       	ldd	r16, Y+4	; 0x04
 8aa:	1b 81       	ldd	r17, Y+3	; 0x03
 8ac:	aa 81       	ldd	r26, Y+2	; 0x02
 8ae:	b9 81       	ldd	r27, Y+1	; 0x01
 8b0:	ce 0f       	add	r28, r30
 8b2:	d1 1d       	adc	r29, r1
 8b4:	0f b6       	in	r0, 0x3f	; 63
 8b6:	f8 94       	cli
 8b8:	de bf       	out	0x3e, r29	; 62
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	cd bf       	out	0x3d, r28	; 61
 8be:	ed 01       	movw	r28, r26
 8c0:	08 95       	ret

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
