
System_AUTO_Poliv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001282  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e4f  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063a  00000000  00000000  000024a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068b  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040e  00000000  00000000  000032f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  8c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  90:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  94:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  98:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  bc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  cc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  dc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  e0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	ea e0       	ldi	r30, 0x0A	; 10
  f8:	f2 e0       	ldi	r31, 0x02	; 2
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a4 31       	cpi	r26, 0x14	; 20
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 10a:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <TWI_init>:
#include "I2C.h"

void TWI_init(void)
{
	
	TWBR=0x20;//задаем скорость 100к√ц
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 118:	08 95       	ret

0000011a <main>:


int main(void)
{
	
	USART0_INIT(103);
 11a:	87 e6       	ldi	r24, 0x67	; 103
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 a9 00 	call	0x152	; 0x152 <USART0_INIT>
	USART2_INIT(103);
 122:	87 e6       	ldi	r24, 0x67	; 103
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 bf 00 	call	0x17e	; 0x17e <USART2_INIT>
	TWI_init();
 12a:	0e 94 89 00 	call	0x112	; 0x112 <TWI_init>
	USART0_puts('S');
 12e:	83 e5       	ldi	r24, 0x53	; 83
 130:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USART0_puts>
	USART0_puts(0x0a);
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USART0_puts>
	USART0_puts(0x0d);
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USART0_puts>
	USART0_putsString("Blethooth");
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART0_putsString>
	USART2_putsString("RF-Module");
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <USART2_putsString>
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0x36>

00000152 <USART0_INIT>:



void USART0_INIT(unsigned int baud)
{
	UBRR0H=(unsigned char)(baud>>8);//установка скорости старший разр€д
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L=(unsigned char)baud;//младший разр€д
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	


UCSR0B=(1<<TXEN0)|(1<<RXEN0);//разрешени€ работы приемника/передатчика
 15a:	e1 ec       	ldi	r30, 0xC1	; 193
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	80 83       	st	Z, r24
 UCSR0B |= (1<<RXCIE0);//прерывани€ по приемнику
 162:	80 81       	ld	r24, Z
 164:	80 68       	ori	r24, 0x80	; 128
 166:	80 83       	st	Z, r24
UCSR0A |= (1<<U2X0);//мультиплексирование скорости
 168:	e0 ec       	ldi	r30, 0xC0	; 192
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	80 83       	st	Z, r24
UCSR0C|=(1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);//биты настройки : 1 стоп бит и 8 бит данных
 172:	e2 ec       	ldi	r30, 0xC2	; 194
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8e 60       	ori	r24, 0x0E	; 14
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <USART2_INIT>:


void USART2_INIT(unsigned int baud)
{
	
	UBRR2H=(unsigned char)(baud>>8);
 17e:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7e00d5>
	UBRR2L=(unsigned char)baud;
 182:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7e00d4>
	


	UCSR2B=(1<<TXEN2)|(1<<RXEN2);
 186:	e1 ed       	ldi	r30, 0xD1	; 209
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	88 e1       	ldi	r24, 0x18	; 24
 18c:	80 83       	st	Z, r24
	UCSR2B |= (1<<RXCIE2);
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	80 83       	st	Z, r24
	UCSR2A |= (1<<U2X2);
 194:	e0 ed       	ldi	r30, 0xD0	; 208
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	80 83       	st	Z, r24
	UCSR2C|=(1<<USBS2)|(1<<UCSZ21)|(1<<UCSZ20);
 19e:	e2 ed       	ldi	r30, 0xD2	; 210
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8e 60       	ori	r24, 0x0E	; 14
 1a6:	80 83       	st	Z, r24
 1a8:	08 95       	ret

000001aa <USART0_puts>:

}

void USART0_puts(unsigned char data)
{
	while(!(UCSR0A&(1<<UDRE0)));//ожидаем опусташение буфера
 1aa:	e0 ec       	ldi	r30, 0xC0	; 192
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	90 81       	ld	r25, Z
 1b0:	95 ff       	sbrs	r25, 5
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <USART0_puts+0x4>
	UDR0=data;//записываем данные из переменной 
 1b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b8:	08 95       	ret

000001ba <USART2_puts>:
}


void USART2_puts(unsigned char data)
{
	while(!(UCSR2A&(1<<UDRE2)));
 1ba:	e0 ed       	ldi	r30, 0xD0	; 208
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	90 81       	ld	r25, Z
 1c0:	95 ff       	sbrs	r25, 5
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <USART2_puts+0x4>
	UDR2=data;
 1c4:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7e00d6>
 1c8:	08 95       	ret

000001ca <USART0_putsString>:




void USART0_putsString(char *str1)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24

for(int i=0;str1[i];i++)//в цикле перебираем строку(массив символов)и помещаем всех в буффер
 1d0:	88 81       	ld	r24, Y
 1d2:	88 23       	and	r24, r24
 1d4:	31 f0       	breq	.+12     	; 0x1e2 <USART0_putsString+0x18>
 1d6:	21 96       	adiw	r28, 0x01	; 1
{
	USART0_puts(str1[i]);
 1d8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USART0_puts>


void USART0_putsString(char *str1)
{

for(int i=0;str1[i];i++)//в цикле перебираем строку(массив символов)и помещаем всех в буффер
 1dc:	89 91       	ld	r24, Y+
 1de:	81 11       	cpse	r24, r1
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <USART0_putsString+0xe>
{
	USART0_puts(str1[i]);
		
}

}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <USART2_putsString>:


void USART2_putsString(char *str1)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24

	for(int i=0;str1[i];i++)
 1ee:	88 81       	ld	r24, Y
 1f0:	88 23       	and	r24, r24
 1f2:	31 f0       	breq	.+12     	; 0x200 <USART2_putsString+0x18>
 1f4:	21 96       	adiw	r28, 0x01	; 1
	{
		USART2_puts(str1[i]);
 1f6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART2_puts>


void USART2_putsString(char *str1)
{

	for(int i=0;str1[i];i++)
 1fa:	89 91       	ld	r24, Y+
 1fc:	81 11       	cpse	r24, r1
 1fe:	fb cf       	rjmp	.-10     	; 0x1f6 <USART2_putsString+0xe>
	{
		USART2_puts(str1[i]);
		
	}

}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
