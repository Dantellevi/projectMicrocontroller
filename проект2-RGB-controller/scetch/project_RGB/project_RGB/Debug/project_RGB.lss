
project_RGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00000a86  00000b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008000ec  008000ec  00000ba6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001301  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f7  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b8  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034f  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c9  00000000  00000000  00003127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3e       	cpi	r26, 0xEC	; 236
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac ee       	ldi	r26, 0xEC	; 236
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 30       	cpi	r26, 0x04	; 4
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 02 	call	0x546	; 0x546 <main>
  8a:	0c 94 41 05 	jmp	0xa82	; 0xa82 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Port_init>:
 int B_rand=0;


void Port_init(void)//инициализация портов ввода/вывода
{
DDRB|=(1<<PB3);
  92:	bb 9a       	sbi	0x17, 3	; 23
PORTB&=~(1<<PB3);
  94:	c3 98       	cbi	0x18, 3	; 24


DDRD|=(1<<PD7)|(1<<PD5)|(1<<PD4);
  96:	81 b3       	in	r24, 0x11	; 17
  98:	80 6b       	ori	r24, 0xB0	; 176
  9a:	81 bb       	out	0x11, r24	; 17
PORTD&=~((1<<PD7)|(1<<PD5)|(1<<PD4));
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	8f 74       	andi	r24, 0x4F	; 79
  a0:	82 bb       	out	0x12, r24	; 18

DDRB&=~((1<<PB0)|(1<<PB1));
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	8c 7f       	andi	r24, 0xFC	; 252
  a6:	87 bb       	out	0x17, r24	; 23
PORTB|=(1<<PB0)|(1<<PB1);
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	83 60       	ori	r24, 0x03	; 3
  ac:	88 bb       	out	0x18, r24	; 24



DDRC|=(1<<PC7);
  ae:	a7 9a       	sbi	0x14, 7	; 20
DDRC|=(1<<PC4);
  b0:	a4 9a       	sbi	0x14, 4	; 20
DDRC|=(1<<PC3);
  b2:	a3 9a       	sbi	0x14, 3	; 20
DDRC|=(1<<PC2);
  b4:	a2 9a       	sbi	0x14, 2	; 20

PORTC&=~(1<<PC7);
  b6:	af 98       	cbi	0x15, 7	; 21
PORTC&=~(1<<PC4);
  b8:	ac 98       	cbi	0x15, 4	; 21
PORTC&=~(1<<PC3);
  ba:	ab 98       	cbi	0x15, 3	; 21
PORTC&=~(1<<PC2);
  bc:	aa 98       	cbi	0x15, 2	; 21
  be:	08 95       	ret

000000c0 <Color_settings>:

}


void Color_settings(unsigned char color)//выбор цвета в режиме работы 1
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	c8 2f       	mov	r28, r24

if (color==1)
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	d9 f4       	brne	.+54     	; 0x100 <Color_settings+0x40>
{
//красный
uart_write("color red");
  ca:	86 e6       	ldi	r24, 0x66	; 102
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
uart_putc(0x0d);
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
OCR0=254;
  de:	8e ef       	ldi	r24, 0xFE	; 254
  e0:	8c bf       	out	0x3c, r24	; 60
OCR1A=1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9b bd       	out	0x2b, r25	; 43
  e8:	8a bd       	out	0x2a, r24	; 42
OCR2=1;
  ea:	83 bd       	out	0x23, r24	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	96 e0       	ldi	r25, 0x06	; 6
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <Color_settings+0x32>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <Color_settings+0x3c>
  fc:	00 00       	nop
  fe:	3b c0       	rjmp	.+118    	; 0x176 <Color_settings+0xb6>

_delay_ms(250);
}

if (color==2)
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	e1 f4       	brne	.+56     	; 0x13c <Color_settings+0x7c>
{
//оранжевый
uart_write("color orange");
 104:	80 e7       	ldi	r24, 0x70	; 112
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
uart_putc(0x0d);
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
OCR0=250;
 118:	8a ef       	ldi	r24, 0xFA	; 250
 11a:	8c bf       	out	0x3c, r24	; 60
OCR1A=54;
 11c:	86 e3       	ldi	r24, 0x36	; 54
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	9b bd       	out	0x2b, r25	; 43
 122:	8a bd       	out	0x2a, r24	; 42
OCR2=1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	83 bd       	out	0x23, r24	; 35
 128:	2f e7       	ldi	r18, 0x7F	; 127
 12a:	8a e1       	ldi	r24, 0x1A	; 26
 12c:	96 e0       	ldi	r25, 0x06	; 6
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <Color_settings+0x6e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <Color_settings+0x78>
 138:	00 00       	nop
 13a:	3b c0       	rjmp	.+118    	; 0x1b2 <Color_settings+0xf2>
_delay_ms(250);
}

if (color==3)
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	d9 f4       	brne	.+54     	; 0x176 <Color_settings+0xb6>
{
//зеленый
uart_write("color green");
 140:	8d e7       	ldi	r24, 0x7D	; 125
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
uart_putc(0x0d);
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
	OCR0=10;
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	8c bf       	out	0x3c, r24	; 60
	OCR1A=209;
 158:	21 ed       	ldi	r18, 0xD1	; 209
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	3b bd       	out	0x2b, r19	; 43
 15e:	2a bd       	out	0x2a, r18	; 42
	OCR2=10;
 160:	83 bd       	out	0x23, r24	; 35
 162:	2f e7       	ldi	r18, 0x7F	; 127
 164:	8a e1       	ldi	r24, 0x1A	; 26
 166:	96 e0       	ldi	r25, 0x06	; 6
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <Color_settings+0xa8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <Color_settings+0xb2>
 172:	00 00       	nop
 174:	3c c0       	rjmp	.+120    	; 0x1ee <Color_settings+0x12e>
	_delay_ms(250);
}
if (color==4)
 176:	c4 30       	cpi	r28, 0x04	; 4
 178:	e1 f4       	brne	.+56     	; 0x1b2 <Color_settings+0xf2>
{
//синий
uart_write("color blue");
 17a:	89 e8       	ldi	r24, 0x89	; 137
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
uart_putc(0x0d);
 182:	8d e0       	ldi	r24, 0x0D	; 13
 184:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
OCR0=8;
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	8c bf       	out	0x3c, r24	; 60
OCR1A=13;
 192:	8d e0       	ldi	r24, 0x0D	; 13
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9b bd       	out	0x2b, r25	; 43
 198:	8a bd       	out	0x2a, r24	; 42
OCR2=220;
 19a:	8c ed       	ldi	r24, 0xDC	; 220
 19c:	83 bd       	out	0x23, r24	; 35
 19e:	2f e7       	ldi	r18, 0x7F	; 127
 1a0:	8a e1       	ldi	r24, 0x1A	; 26
 1a2:	96 e0       	ldi	r25, 0x06	; 6
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <Color_settings+0xe4>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <Color_settings+0xee>
 1ae:	00 00       	nop
 1b0:	3c c0       	rjmp	.+120    	; 0x22a <Color_settings+0x16a>
_delay_ms(250);
}

if (color==5)
 1b2:	c5 30       	cpi	r28, 0x05	; 5
 1b4:	e1 f4       	brne	.+56     	; 0x1ee <Color_settings+0x12e>
{
	
	uart_write("color fialot");
 1b6:	84 e9       	ldi	r24, 0x94	; 148
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
	uart_putc(0x0d);
 1be:	8d e0       	ldi	r24, 0x0D	; 13
 1c0:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
	uart_putc(0x0a);
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
	OCR0=150;
 1ca:	86 e9       	ldi	r24, 0x96	; 150
 1cc:	8c bf       	out	0x3c, r24	; 60
	OCR1A=59;
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	9b bd       	out	0x2b, r25	; 43
 1d4:	8a bd       	out	0x2a, r24	; 42
	OCR2=168;
 1d6:	88 ea       	ldi	r24, 0xA8	; 168
 1d8:	83 bd       	out	0x23, r24	; 35
 1da:	2f e7       	ldi	r18, 0x7F	; 127
 1dc:	8a e1       	ldi	r24, 0x1A	; 26
 1de:	96 e0       	ldi	r25, 0x06	; 6
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <Color_settings+0x120>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <Color_settings+0x12a>
 1ea:	00 00       	nop
 1ec:	4c c0       	rjmp	.+152    	; 0x286 <Color_settings+0x1c6>
	_delay_ms(250);
}

if (color==6)
 1ee:	c6 30       	cpi	r28, 0x06	; 6
 1f0:	e1 f4       	brne	.+56     	; 0x22a <Color_settings+0x16a>
{
	
	uart_write("color 6");
 1f2:	81 ea       	ldi	r24, 0xA1	; 161
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
	uart_putc(0x0d);
 1fa:	8d e0       	ldi	r24, 0x0D	; 13
 1fc:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
	uart_putc(0x0a);
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
	OCR0=255;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	8c bf       	out	0x3c, r24	; 60
	OCR1A=234;
 20a:	8a ee       	ldi	r24, 0xEA	; 234
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9b bd       	out	0x2b, r25	; 43
 210:	8a bd       	out	0x2a, r24	; 42
	OCR2=5;
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	83 bd       	out	0x23, r24	; 35
 216:	2f e7       	ldi	r18, 0x7F	; 127
 218:	8a e1       	ldi	r24, 0x1A	; 26
 21a:	96 e0       	ldi	r25, 0x06	; 6
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <Color_settings+0x15c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <Color_settings+0x166>
 226:	00 00       	nop
 228:	2e c0       	rjmp	.+92     	; 0x286 <Color_settings+0x1c6>
	_delay_ms(250);
}
if (color>6)
 22a:	c7 30       	cpi	r28, 0x07	; 7
 22c:	60 f1       	brcs	.+88     	; 0x286 <Color_settings+0x1c6>
{
OCR0=2+rand()%255;
 22e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <rand>
 232:	cf ef       	ldi	r28, 0xFF	; 255
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	be 01       	movw	r22, r28
 238:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 23c:	8e 5f       	subi	r24, 0xFE	; 254
 23e:	8c bf       	out	0x3c, r24	; 60
OCR1A=2+rand()%250;
 240:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <rand>
 244:	6a ef       	ldi	r22, 0xFA	; 250
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 24c:	02 96       	adiw	r24, 0x02	; 2
 24e:	9b bd       	out	0x2b, r25	; 43
 250:	8a bd       	out	0x2a, r24	; 42
OCR2=2+rand()%255;
 252:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <rand>
 256:	be 01       	movw	r22, r28
 258:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 25c:	8e 5f       	subi	r24, 0xFE	; 254
 25e:	83 bd       	out	0x23, r24	; 35
uart_write("RANDOM!");
 260:	89 ea       	ldi	r24, 0xA9	; 169
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
uart_putc(0x0d);
 268:	8d e0       	ldi	r24, 0x0D	; 13
 26a:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
 274:	2f e7       	ldi	r18, 0x7F	; 127
 276:	8a e1       	ldi	r24, 0x1A	; 26
 278:	96 e0       	ldi	r25, 0x06	; 6
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <Color_settings+0x1ba>
 282:	00 c0       	rjmp	.+0      	; 0x284 <Color_settings+0x1c4>
 284:	00 00       	nop
_delay_ms(250);
}

}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <Timer_init>:


void Timer_init(void)//инициализация ШИМ(таймеров счетчиков )OCR2,OCR0,OCR1A
{
//Timer 0
TCCR0|=(1<<WGM00)|(1<<WGM01);
 28c:	83 b7       	in	r24, 0x33	; 51
 28e:	88 64       	ori	r24, 0x48	; 72
 290:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<COM01);
 292:	83 b7       	in	r24, 0x33	; 51
 294:	80 62       	ori	r24, 0x20	; 32
 296:	83 bf       	out	0x33, r24	; 51

TCCR0|=(1<<CS01);
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	82 60       	ori	r24, 0x02	; 2
 29c:	83 bf       	out	0x33, r24	; 51

//end

//timer1 

TCCR1A|=(1<<COM1B1)|(0<<COM1B0)|(1<<WGM10)|(0<<WGM11)|(1<<COM1A1)|(0<<COM1A0);
 29e:	8f b5       	in	r24, 0x2f	; 47
 2a0:	81 6a       	ori	r24, 0xA1	; 161
 2a2:	8f bd       	out	0x2f, r24	; 47
TCCR1B|=(1<<WGM12)|(0<<WGM13)|(1<<CS11);
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	8a 60       	ori	r24, 0x0A	; 10
 2a8:	8e bd       	out	0x2e, r24	; 46
//end


//Timer 2

TCCR2|=(1<<WGM20)|(1<<WGM21);
 2aa:	85 b5       	in	r24, 0x25	; 37
 2ac:	88 64       	ori	r24, 0x48	; 72
 2ae:	85 bd       	out	0x25, r24	; 37
TCCR2|=(1<<COM21);
 2b0:	85 b5       	in	r24, 0x25	; 37
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	85 bd       	out	0x25, r24	; 37

TCCR2|=(1<<CS21);
 2b6:	85 b5       	in	r24, 0x25	; 37
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	85 bd       	out	0x25, r24	; 37
 2bc:	08 95       	ret

000002be <Clock>:
}



void Clock(void)//работа микросхемы часов ds1307 и вывод данных в UART интерфейс
{
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29


I2C_SendByADDR(0,0b11010000);
 2c6:	60 ed       	ldi	r22, 0xD0	; 208
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <I2C_SendByADDR>
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	82 e5       	ldi	r24, 0x52	; 82
 2d2:	97 e0       	ldi	r25, 0x07	; 7
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <Clock+0x16>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <Clock+0x20>
 2de:	00 00       	nop
_delay_ms(300);
I2C_Start();
 2e0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <I2C_Start>

I2C_SendByte(0b11010001);//отправляем в устройство бит чтения
 2e4:	81 ed       	ldi	r24, 0xD1	; 209
 2e6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <I2C_SendByte>
second=I2C_ReadByte();
 2ea:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <I2C_ReadByte>
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 ff 00 	sts	0x00FF, r25
 2f4:	80 93 fe 00 	sts	0x00FE, r24
minuts=I2C_ReadByte();
 2f8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <I2C_ReadByte>
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 fd 00 	sts	0x00FD, r25
 302:	80 93 fc 00 	sts	0x00FC, r24
hose=I2C_ReadByte();
 306:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <I2C_ReadByte>
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 93 fb 00 	sts	0x00FB, r25
 310:	80 93 fa 00 	sts	0x00FA, r24
day=I2C_ReadByte();
 314:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <I2C_ReadByte>
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 f9 00 	sts	0x00F9, r25
 31e:	80 93 f8 00 	sts	0x00F8, r24
data=I2C_ReadByte();
 322:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <I2C_ReadByte>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 f7 00 	sts	0x00F7, r25
 32c:	80 93 f6 00 	sts	0x00F6, r24
mesiac=I2C_ReadByte();
 330:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <I2C_ReadByte>
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 f5 00 	sts	0x00F5, r25
 33a:	80 93 f4 00 	sts	0x00F4, r24
year=I2C_ReadLastByte();
 33e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <I2C_ReadLastByte>
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 f3 00 	sts	0x00F3, r25
 348:	80 93 f2 00 	sts	0x00F2, r24
I2C_Stop();
 34c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <I2C_Stop>
second=RTC_ConvertDEC(second);
 350:	80 91 fe 00 	lds	r24, 0x00FE
 354:	0e 94 c6 03 	call	0x78c	; 0x78c <RTC_ConvertDEC>
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	90 93 ff 00 	sts	0x00FF, r25
 35e:	80 93 fe 00 	sts	0x00FE, r24
minuts=RTC_ConvertDEC(minuts);
 362:	80 91 fc 00 	lds	r24, 0x00FC
 366:	0e 94 c6 03 	call	0x78c	; 0x78c <RTC_ConvertDEC>
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 fd 00 	sts	0x00FD, r25
 370:	80 93 fc 00 	sts	0x00FC, r24
hose=RTC_ConvertDEC(hose);
 374:	80 91 fa 00 	lds	r24, 0x00FA
 378:	0e 94 c6 03 	call	0x78c	; 0x78c <RTC_ConvertDEC>
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	90 93 fb 00 	sts	0x00FB, r25
 382:	80 93 fa 00 	sts	0x00FA, r24
day=RTC_ConvertDEC(day);
 386:	08 ef       	ldi	r16, 0xF8	; 248
 388:	10 e0       	ldi	r17, 0x00	; 0
 38a:	f8 01       	movw	r30, r16
 38c:	80 81       	ld	r24, Z
 38e:	0e 94 c6 03 	call	0x78c	; 0x78c <RTC_ConvertDEC>
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	90 93 f9 00 	sts	0x00F9, r25
 398:	80 93 f8 00 	sts	0x00F8, r24
data=RTC_ConvertDEC(data);
 39c:	80 91 f6 00 	lds	r24, 0x00F6
 3a0:	0e 94 c6 03 	call	0x78c	; 0x78c <RTC_ConvertDEC>
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	90 93 f7 00 	sts	0x00F7, r25
 3aa:	80 93 f6 00 	sts	0x00F6, r24
mesiac=RTC_ConvertDEC(mesiac);
 3ae:	80 91 f4 00 	lds	r24, 0x00F4
 3b2:	0e 94 c6 03 	call	0x78c	; 0x78c <RTC_ConvertDEC>
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 f5 00 	sts	0x00F5, r25
 3bc:	80 93 f4 00 	sts	0x00F4, r24
year=RTC_ConvertDEC(year);
 3c0:	80 91 f2 00 	lds	r24, 0x00F2
 3c4:	0e 94 c6 03 	call	0x78c	; 0x78c <RTC_ConvertDEC>
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 f3 00 	sts	0x00F3, r25
 3ce:	80 93 f2 00 	sts	0x00F2, r24
//---------------------------------------------------


uart_putc(0x0d);
 3d2:	8d e0       	ldi	r24, 0x0D	; 13
 3d4:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
 3d8:	8a e0       	ldi	r24, 0x0A	; 10
 3da:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(data/10+0x30);//преобразуем число в код числа
 3de:	80 91 f6 00 	lds	r24, 0x00F6
 3e2:	90 91 f7 00 	lds	r25, 0x00F7
 3e6:	ca e0       	ldi	r28, 0x0A	; 10
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	be 01       	movw	r22, r28
 3ec:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	86 0f       	add	r24, r22
 3f4:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(data%10+0x30);//преобразуем число в код числа
 3f8:	80 91 f6 00 	lds	r24, 0x00F6
 3fc:	90 91 f7 00 	lds	r25, 0x00F7
 400:	be 01       	movw	r22, r28
 402:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 406:	80 5d       	subi	r24, 0xD0	; 208
 408:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 40c:	8e e2       	ldi	r24, 0x2E	; 46
 40e:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(mesiac/10+0x30);//преобразуем число в код числа
 412:	80 91 f4 00 	lds	r24, 0x00F4
 416:	90 91 f5 00 	lds	r25, 0x00F5
 41a:	be 01       	movw	r22, r28
 41c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 420:	80 e3       	ldi	r24, 0x30	; 48
 422:	86 0f       	add	r24, r22
 424:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(mesiac%10+0x30);//преобразуем число в код числа
 428:	80 91 f4 00 	lds	r24, 0x00F4
 42c:	90 91 f5 00 	lds	r25, 0x00F5
 430:	be 01       	movw	r22, r28
 432:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 436:	80 5d       	subi	r24, 0xD0	; 208
 438:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 43c:	8e e2       	ldi	r24, 0x2E	; 46
 43e:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(year/10+0x30);//преобразуем число в код числа
 442:	80 91 f2 00 	lds	r24, 0x00F2
 446:	90 91 f3 00 	lds	r25, 0x00F3
 44a:	be 01       	movw	r22, r28
 44c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 450:	80 e3       	ldi	r24, 0x30	; 48
 452:	86 0f       	add	r24, r22
 454:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(year%10+0x30);//преобразуем число в код числа
 458:	80 91 f2 00 	lds	r24, 0x00F2
 45c:	90 91 f3 00 	lds	r25, 0x00F3
 460:	be 01       	movw	r22, r28
 462:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 466:	80 5d       	subi	r24, 0xD0	; 208
 468:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 46c:	8e e2       	ldi	r24, 0x2E	; 46
 46e:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 472:	8e e2       	ldi	r24, 0x2E	; 46
 474:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 478:	8e e2       	ldi	r24, 0x2E	; 46
 47a:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 47e:	8e e2       	ldi	r24, 0x2E	; 46
 480:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 484:	8e e2       	ldi	r24, 0x2E	; 46
 486:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(day+0x30);
 48a:	f8 01       	movw	r30, r16
 48c:	80 81       	ld	r24, Z
 48e:	80 5d       	subi	r24, 0xD0	; 208
 490:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 494:	8e e2       	ldi	r24, 0x2E	; 46
 496:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 49a:	8e e2       	ldi	r24, 0x2E	; 46
 49c:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc('.');
 4a0:	8e e2       	ldi	r24, 0x2E	; 46
 4a2:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(hose/10+0x30);//преобразуем число в код числа
 4a6:	80 91 fa 00 	lds	r24, 0x00FA
 4aa:	90 91 fb 00 	lds	r25, 0x00FB
 4ae:	be 01       	movw	r22, r28
 4b0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	86 0f       	add	r24, r22
 4b8:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(hose%10+0x30);
 4bc:	80 91 fa 00 	lds	r24, 0x00FA
 4c0:	90 91 fb 00 	lds	r25, 0x00FB
 4c4:	be 01       	movw	r22, r28
 4c6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 4ca:	80 5d       	subi	r24, 0xD0	; 208
 4cc:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(':');
 4d0:	8a e3       	ldi	r24, 0x3A	; 58
 4d2:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(minuts/10+0x30);//преобразуем число в код числа
 4d6:	80 91 fc 00 	lds	r24, 0x00FC
 4da:	90 91 fd 00 	lds	r25, 0x00FD
 4de:	be 01       	movw	r22, r28
 4e0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 4e4:	80 e3       	ldi	r24, 0x30	; 48
 4e6:	86 0f       	add	r24, r22
 4e8:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(minuts%10+0x30);
 4ec:	80 91 fc 00 	lds	r24, 0x00FC
 4f0:	90 91 fd 00 	lds	r25, 0x00FD
 4f4:	be 01       	movw	r22, r28
 4f6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 4fa:	80 5d       	subi	r24, 0xD0	; 208
 4fc:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(':');
 500:	8a e3       	ldi	r24, 0x3A	; 58
 502:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(second/10+0x30);//преобразуем число в код числа
 506:	80 91 fe 00 	lds	r24, 0x00FE
 50a:	90 91 ff 00 	lds	r25, 0x00FF
 50e:	be 01       	movw	r22, r28
 510:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 514:	80 e3       	ldi	r24, 0x30	; 48
 516:	86 0f       	add	r24, r22
 518:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(second%10+0x30);
 51c:	80 91 fe 00 	lds	r24, 0x00FE
 520:	90 91 ff 00 	lds	r25, 0x00FF
 524:	be 01       	movw	r22, r28
 526:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 52a:	80 5d       	subi	r24, 0xD0	; 208
 52c:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0d);
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
 536:	8a e0       	ldi	r24, 0x0A	; 10
 538:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>


}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	08 95       	ret

00000546 <main>:



int main(void)
{
 Port_init();
 546:	0e 94 49 00 	call	0x92	; 0x92 <Port_init>
 Timer_init();
 54a:	0e 94 46 01 	call	0x28c	; 0x28c <Timer_init>
 sei();
 54e:	78 94       	sei
uart_init(9600);
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	95 e2       	ldi	r25, 0x25	; 37
 554:	0e 94 00 04 	call	0x800	; 0x800 <uart_init>
uart_write("hello");
 558:	81 eb       	ldi	r24, 0xB1	; 177
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
uart_putc(0x0d);
 560:	8d e0       	ldi	r24, 0x0D	; 13
 562:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
uart_putc(0x0a);
 566:	8a e0       	ldi	r24, 0x0A	; 10
 568:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>

  
  OCR0=5;OCR1A=5;OCR2=5;
 56c:	85 e0       	ldi	r24, 0x05	; 5
 56e:	8c bf       	out	0x3c, r24	; 60
 570:	25 e0       	ldi	r18, 0x05	; 5
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	3b bd       	out	0x2b, r19	; 43
 576:	2a bd       	out	0x2a, r18	; 42
 578:	83 bd       	out	0x23, r24	; 35
  PORTC|=(1<<PC7);
 57a:	af 9a       	sbi	0x15, 7	; 21
   PORTC&=~(1<<PC2);
 57c:	aa 98       	cbi	0x15, 2	; 21
		uart_putc(0x0a);
		_delay_ms(250);

		}
		else{
		R_rand=2+rand()%255;
 57e:	66 24       	eor	r6, r6
 580:	6a 94       	dec	r6
 582:	71 2c       	mov	r7, r1
		G_rand=2+rand()%250;
 584:	0f 2e       	mov	r0, r31
 586:	fa ef       	ldi	r31, 0xFA	; 250
 588:	8f 2e       	mov	r8, r31
 58a:	91 2c       	mov	r9, r1
 58c:	f0 2d       	mov	r31, r0
		B_rand=2+rand()%255;

		OCR2=B_rand;
		OCR0=G_rand;
 58e:	0f 2e       	mov	r0, r31
 590:	fe ee       	ldi	r31, 0xEE	; 238
 592:	cf 2e       	mov	r12, r31
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	df 2e       	mov	r13, r31
 598:	f0 2d       	mov	r31, r0
		uart_putc(0x0a);
		_delay_ms(250);
		}
	 if((hose>=16)&&(hose<20))
		{
		OCR2=100;
 59a:	0f 2e       	mov	r0, r31
 59c:	f4 e6       	ldi	r31, 0x64	; 100
 59e:	5f 2e       	mov	r5, r31
 5a0:	f0 2d       	mov	r31, r0
		OCR0=254;
		OCR1A=200;
 5a2:	0f 2e       	mov	r0, r31
 5a4:	f8 ec       	ldi	r31, 0xC8	; 200
 5a6:	ef 2e       	mov	r14, r31
 5a8:	f1 2c       	mov	r15, r1
 5aa:	f0 2d       	mov	r31, r0
		if ((hose>=7)&&(hose<8))
		{

		OCR2=155;
		OCR0=100;
		OCR1A=10;
 5ac:	0f 2e       	mov	r0, r31
 5ae:	fa e0       	ldi	r31, 0x0A	; 10
 5b0:	af 2e       	mov	r10, r31
 5b2:	b1 2c       	mov	r11, r1
 5b4:	f0 2d       	mov	r31, r0
		if (flag_work==1)//первый режим работы постоянно горит с выбором цвета
		{
		PORTC|=(1<<PC2);
		PORTC&=~(1<<PC3);
		PORTC&=~(1<<PC4);
		Color_settings(color);
 5b6:	c4 e6       	ldi	r28, 0x64	; 100
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(250);
		}
	 if((hose>=16)&&(hose<20))
		{
		OCR2=100;
		OCR0=254;
 5ba:	0e ef       	ldi	r16, 0xFE	; 254
		uart_putc(0x0a);
		_delay_ms(250);
		if ((hose>=7)&&(hose<8))
		{

		OCR2=155;
 5bc:	1b e9       	ldi	r17, 0x9B	; 155
  PORTC|=(1<<PC7);
   PORTC&=~(1<<PC2);
    while (1) 
    {
	
		if (!(PINB&(1<<PB0)))//кнопка выбора режима работы
 5be:	b0 99       	sbic	0x16, 0	; 22
 5c0:	1d c0       	rjmp	.+58     	; 0x5fc <main+0xb6>
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	80 e7       	ldi	r24, 0x70	; 112
 5c6:	92 e0       	ldi	r25, 0x02	; 2
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	80 40       	sbci	r24, 0x00	; 0
 5cc:	90 40       	sbci	r25, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <main+0x82>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <main+0x8c>
 5d2:	00 00       	nop
		{
		_delay_ms(100);
		flag_work++;
 5d4:	80 91 00 01 	lds	r24, 0x0100
 5d8:	90 91 01 01 	lds	r25, 0x0101
 5dc:	01 96       	adiw	r24, 0x01	; 1
			if (flag_work>4)
 5de:	85 30       	cpi	r24, 0x05	; 5
 5e0:	91 05       	cpc	r25, r1
 5e2:	28 f4       	brcc	.+10     	; 0x5ee <main+0xa8>
    {
	
		if (!(PINB&(1<<PB0)))//кнопка выбора режима работы
		{
		_delay_ms(100);
		flag_work++;
 5e4:	90 93 01 01 	sts	0x0101, r25
 5e8:	80 93 00 01 	sts	0x0100, r24
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <main+0xb6>
			if (flag_work>4)
			{
			flag_work=0;
 5ee:	10 92 01 01 	sts	0x0101, r1
 5f2:	10 92 00 01 	sts	0x0100, r1
			}
		}

		if (!(PINB&(1<<PB1)))//кнопка выбора цвета
 5f6:	b1 99       	sbic	0x16, 1	; 22
 5f8:	b0 c0       	rjmp	.+352    	; 0x75a <main+0x214>
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <main+0xba>
 5fc:	b1 99       	sbic	0x16, 1	; 22
 5fe:	12 c0       	rjmp	.+36     	; 0x624 <main+0xde>
 600:	ef ef       	ldi	r30, 0xFF	; 255
 602:	f0 e7       	ldi	r31, 0x70	; 112
 604:	22 e0       	ldi	r18, 0x02	; 2
 606:	e1 50       	subi	r30, 0x01	; 1
 608:	f0 40       	sbci	r31, 0x00	; 0
 60a:	20 40       	sbci	r18, 0x00	; 0
 60c:	e1 f7       	brne	.-8      	; 0x606 <main+0xc0>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <main+0xca>
 610:	00 00       	nop
		{
			_delay_ms(100);
			color+=1;
 612:	80 91 64 00 	lds	r24, 0x0064
 616:	90 91 65 00 	lds	r25, 0x0065
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	90 93 65 00 	sts	0x0065, r25
 620:	80 93 64 00 	sts	0x0064, r24
			

		}

		
		if (flag_work==1)//первый режим работы постоянно горит с выбором цвета
 624:	80 91 00 01 	lds	r24, 0x0100
 628:	90 91 01 01 	lds	r25, 0x0101
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	31 f4       	brne	.+12     	; 0x63c <main+0xf6>
		{
		PORTC|=(1<<PC2);
 630:	aa 9a       	sbi	0x15, 2	; 21
		PORTC&=~(1<<PC3);
 632:	ab 98       	cbi	0x15, 3	; 21
		PORTC&=~(1<<PC4);
 634:	ac 98       	cbi	0x15, 4	; 21
		Color_settings(color);
 636:	88 81       	ld	r24, Y
 638:	0e 94 60 00 	call	0xc0	; 0xc0 <Color_settings>
		}




		if (flag_work==2)//второй режим работы с работой часов и включение определенного цвета в определенное время
 63c:	80 91 00 01 	lds	r24, 0x0100
 640:	90 91 01 01 	lds	r25, 0x0101
 644:	02 97       	sbiw	r24, 0x02	; 2
 646:	09 f0       	breq	.+2      	; 0x64a <main+0x104>
 648:	88 c0       	rjmp	.+272    	; 0x75a <main+0x214>
		{
		PORTC&=~(1<<PC2);
 64a:	aa 98       	cbi	0x15, 2	; 21
		PORTC|=(1<<PC3);
 64c:	ab 9a       	sbi	0x15, 3	; 21
		Clock();
 64e:	0e 94 5f 01 	call	0x2be	; 0x2be <Clock>
		uart_write(" clock-0n!!");
 652:	87 eb       	ldi	r24, 0xB7	; 183
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
		uart_putc(0x0d);
 65a:	8d e0       	ldi	r24, 0x0D	; 13
 65c:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
		uart_putc(0x0a);
 660:	8a e0       	ldi	r24, 0x0A	; 10
 662:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
 666:	8f e7       	ldi	r24, 0x7F	; 127
 668:	9a e1       	ldi	r25, 0x1A	; 26
 66a:	e6 e0       	ldi	r30, 0x06	; 6
 66c:	81 50       	subi	r24, 0x01	; 1
 66e:	90 40       	sbci	r25, 0x00	; 0
 670:	e0 40       	sbci	r30, 0x00	; 0
 672:	e1 f7       	brne	.-8      	; 0x66c <main+0x126>
 674:	00 c0       	rjmp	.+0      	; 0x676 <main+0x130>
 676:	00 00       	nop
		_delay_ms(250);
		if ((hose>=7)&&(hose<8))
 678:	80 91 fa 00 	lds	r24, 0x00FA
 67c:	90 91 fb 00 	lds	r25, 0x00FB
 680:	07 97       	sbiw	r24, 0x07	; 7
 682:	b9 f4       	brne	.+46     	; 0x6b2 <main+0x16c>
		{

		OCR2=155;
 684:	13 bd       	out	0x23, r17	; 35
		OCR0=100;
 686:	5c be       	out	0x3c, r5	; 60
		OCR1A=10;
 688:	bb bc       	out	0x2b, r11	; 43
 68a:	aa bc       	out	0x2a, r10	; 42

		uart_write("clock 7-8");
 68c:	83 ec       	ldi	r24, 0xC3	; 195
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
		uart_putc(0x0d);
 694:	8d e0       	ldi	r24, 0x0D	; 13
 696:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
		uart_putc(0x0a);
 69a:	8a e0       	ldi	r24, 0x0A	; 10
 69c:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
 6a0:	ff e7       	ldi	r31, 0x7F	; 127
 6a2:	2a e1       	ldi	r18, 0x1A	; 26
 6a4:	86 e0       	ldi	r24, 0x06	; 6
 6a6:	f1 50       	subi	r31, 0x01	; 1
 6a8:	20 40       	sbci	r18, 0x00	; 0
 6aa:	80 40       	sbci	r24, 0x00	; 0
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x160>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x16a>
 6b0:	00 00       	nop
		_delay_ms(250);
		}
	 if((hose>=16)&&(hose<20))
 6b2:	80 91 fa 00 	lds	r24, 0x00FA
 6b6:	90 91 fb 00 	lds	r25, 0x00FB
 6ba:	40 97       	sbiw	r24, 0x10	; 16
 6bc:	04 97       	sbiw	r24, 0x04	; 4
 6be:	c0 f4       	brcc	.+48     	; 0x6f0 <main+0x1aa>
		{
		OCR2=100;
 6c0:	53 bc       	out	0x23, r5	; 35
		OCR0=254;
 6c2:	0c bf       	out	0x3c, r16	; 60
		OCR1A=200;
 6c4:	fb bc       	out	0x2b, r15	; 43
 6c6:	ea bc       	out	0x2a, r14	; 42

		uart_write("clock 17-20");
 6c8:	8d ec       	ldi	r24, 0xCD	; 205
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
		uart_putc(0x0d);
 6d0:	8d e0       	ldi	r24, 0x0D	; 13
 6d2:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
		uart_putc(0x0a);
 6d6:	8a e0       	ldi	r24, 0x0A	; 10
 6d8:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
 6dc:	9f e7       	ldi	r25, 0x7F	; 127
 6de:	ea e1       	ldi	r30, 0x1A	; 26
 6e0:	f6 e0       	ldi	r31, 0x06	; 6
 6e2:	91 50       	subi	r25, 0x01	; 1
 6e4:	e0 40       	sbci	r30, 0x00	; 0
 6e6:	f0 40       	sbci	r31, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x19c>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x1a6>
 6ec:	00 00       	nop
 6ee:	35 c0       	rjmp	.+106    	; 0x75a <main+0x214>
		_delay_ms(250);

		}
		else{
		R_rand=2+rand()%255;
 6f0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <rand>
 6f4:	b3 01       	movw	r22, r6
 6f6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 6fa:	02 96       	adiw	r24, 0x02	; 2
 6fc:	90 93 f1 00 	sts	0x00F1, r25
 700:	80 93 f0 00 	sts	0x00F0, r24
		G_rand=2+rand()%250;
 704:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <rand>
 708:	b4 01       	movw	r22, r8
 70a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 70e:	02 96       	adiw	r24, 0x02	; 2
 710:	90 93 ef 00 	sts	0x00EF, r25
 714:	80 93 ee 00 	sts	0x00EE, r24
		B_rand=2+rand()%255;
 718:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <rand>
 71c:	b3 01       	movw	r22, r6
 71e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__divmodhi4>
 722:	02 96       	adiw	r24, 0x02	; 2
 724:	90 93 ed 00 	sts	0x00ED, r25
 728:	80 93 ec 00 	sts	0x00EC, r24

		OCR2=B_rand;
 72c:	83 bd       	out	0x23, r24	; 35
		OCR0=G_rand;
 72e:	f6 01       	movw	r30, r12
 730:	80 81       	ld	r24, Z
 732:	8c bf       	out	0x3c, r24	; 60
		OCR1A=R_rand;
 734:	80 91 f0 00 	lds	r24, 0x00F0
 738:	90 91 f1 00 	lds	r25, 0x00F1
 73c:	9b bd       	out	0x2b, r25	; 43
 73e:	8a bd       	out	0x2a, r24	; 42
		
		uart_write("end brenth");
 740:	89 ed       	ldi	r24, 0xD9	; 217
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
 748:	ff e7       	ldi	r31, 0x7F	; 127
 74a:	29 ea       	ldi	r18, 0xA9	; 169
 74c:	83 e0       	ldi	r24, 0x03	; 3
 74e:	f1 50       	subi	r31, 0x01	; 1
 750:	20 40       	sbci	r18, 0x00	; 0
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <main+0x208>
 756:	00 c0       	rjmp	.+0      	; 0x758 <main+0x212>
 758:	00 00       	nop

		_delay_ms(150);
		}
		}

		if(flag_work==3)//третий режим работы - ждущий режим
 75a:	80 91 00 01 	lds	r24, 0x0100
 75e:	90 91 01 01 	lds	r25, 0x0101
 762:	03 97       	sbiw	r24, 0x03	; 3
 764:	09 f0       	breq	.+2      	; 0x768 <main+0x222>
 766:	2b cf       	rjmp	.-426    	; 0x5be <main+0x78>
		{
			PORTC&=~(1<<PC2);
 768:	aa 98       	cbi	0x15, 2	; 21
			PORTC&=~(1<<PC3);
 76a:	ab 98       	cbi	0x15, 3	; 21
			PORTC|=(1<<PC4);
 76c:	ac 9a       	sbi	0x15, 4	; 21
			OCR0=0;OCR1A=0;OCR2=0;
 76e:	1c be       	out	0x3c, r1	; 60
 770:	1b bc       	out	0x2b, r1	; 43
 772:	1a bc       	out	0x2a, r1	; 42
 774:	13 bc       	out	0x23, r1	; 35
			uart_write("work 3");
 776:	84 ee       	ldi	r24, 0xE4	; 228
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 38 04 	call	0x870	; 0x870 <uart_write>
			uart_putc(0x0d);
 77e:	8d e0       	ldi	r24, 0x0D	; 13
 780:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
			uart_putc(0x0a);
 784:	8a e0       	ldi	r24, 0x0A	; 10
 786:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_putc>
 78a:	17 cf       	rjmp	.-466    	; 0x5ba <main+0x74>

0000078c <RTC_ConvertDEC>:
#include "RTC.h"

unsigned char RTC_ConvertDEC(unsigned char c)
{

unsigned char ch=((c>>4)*10+(0b00001111&c));
 78c:	98 2f       	mov	r25, r24
 78e:	92 95       	swap	r25
 790:	9f 70       	andi	r25, 0x0F	; 15
 792:	99 0f       	add	r25, r25
 794:	29 2f       	mov	r18, r25
 796:	22 0f       	add	r18, r18
 798:	22 0f       	add	r18, r18
 79a:	92 0f       	add	r25, r18
 79c:	8f 70       	andi	r24, 0x0F	; 15

return ch;

}
 79e:	89 0f       	add	r24, r25
 7a0:	08 95       	ret

000007a2 <I2C_Start>:

}

void I2C_Start(void)
{
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 7a2:	84 ea       	ldi	r24, 0xA4	; 164
 7a4:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 7a6:	06 b6       	in	r0, 0x36	; 54
 7a8:	07 fe       	sbrs	r0, 7
 7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <I2C_Start+0x4>

}
 7ac:	08 95       	ret

000007ae <I2C_Stop>:
void I2C_Stop(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 7ae:	84 e9       	ldi	r24, 0x94	; 148
 7b0:	86 bf       	out	0x36, r24	; 54
 7b2:	08 95       	ret

000007b4 <I2C_SendByte>:

}

void I2C_SendByte(unsigned char c)
{
TWDR=c;
 7b4:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN);
 7b6:	84 e8       	ldi	r24, 0x84	; 132
 7b8:	86 bf       	out	0x36, r24	; 54
while(!(TWCR&(1<<TWINT)));
 7ba:	06 b6       	in	r0, 0x36	; 54
 7bc:	07 fe       	sbrs	r0, 7
 7be:	fd cf       	rjmp	.-6      	; 0x7ba <I2C_SendByte+0x6>

}
 7c0:	08 95       	ret

000007c2 <I2C_SendByADDR>:


void I2C_SendByADDR(unsigned char c,unsigned char addr)
{
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	c8 2f       	mov	r28, r24
 7c8:	d6 2f       	mov	r29, r22

I2C_Start();
 7ca:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <I2C_Start>
I2C_SendByte(addr);
 7ce:	8d 2f       	mov	r24, r29
 7d0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <I2C_SendByte>
I2C_SendByte(c);
 7d4:	8c 2f       	mov	r24, r28
 7d6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <I2C_SendByte>
while(!(TWCR&(1<<TWINT)));

}
void I2C_Stop(void)
{
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 7da:	84 e9       	ldi	r24, 0x94	; 148
 7dc:	86 bf       	out	0x36, r24	; 54
I2C_Start();
I2C_SendByte(addr);
I2C_SendByte(c);
I2C_Stop();

}
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	08 95       	ret

000007e4 <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 7e4:	84 ec       	ldi	r24, 0xC4	; 196
 7e6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
 7e8:	06 b6       	in	r0, 0x36	; 54
 7ea:	07 fe       	sbrs	r0, 7
 7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <I2C_ReadByte+0x4>
	return TWDR;//читаем регистр данных
 7ee:	83 b1       	in	r24, 0x03	; 3
}
 7f0:	08 95       	ret

000007f2 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 7f2:	84 e8       	ldi	r24, 0x84	; 132
 7f4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
 7f6:	06 b6       	in	r0, 0x36	; 54
 7f8:	07 fe       	sbrs	r0, 7
 7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <I2C_ReadLastByte+0x4>
	return TWDR;//читаем регистр данных
 7fc:	83 b1       	in	r24, 0x03	; 3
 7fe:	08 95       	ret

00000800 <uart_init>:
{
	#if F_CPU < 2000000UL && defined(U2X)
	UCSRA =(1<<U2X);             // если частота ниже 2 МГц, для устранения удваиваем скорость
	UBRRL = (F_CPU / (8UL * baud)) - 1;
	#else
	UBRRL = (F_CPU / (16UL * baud)) - 1;
 800:	a0 e0       	ldi	r26, 0x00	; 0
 802:	b0 e0       	ldi	r27, 0x00	; 0
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	aa 1f       	adc	r26, r26
 80a:	bb 1f       	adc	r27, r27
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	aa 1f       	adc	r26, r26
 812:	bb 1f       	adc	r27, r27
 814:	9c 01       	movw	r18, r24
 816:	ad 01       	movw	r20, r26
 818:	22 0f       	add	r18, r18
 81a:	33 1f       	adc	r19, r19
 81c:	44 1f       	adc	r20, r20
 81e:	55 1f       	adc	r21, r21
 820:	22 0f       	add	r18, r18
 822:	33 1f       	adc	r19, r19
 824:	44 1f       	adc	r20, r20
 826:	55 1f       	adc	r21, r21
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	72 e1       	ldi	r23, 0x12	; 18
 82c:	8a e7       	ldi	r24, 0x7A	; 122
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__udivmodsi4>
 834:	21 50       	subi	r18, 0x01	; 1
 836:	29 b9       	out	0x09, r18	; 9
	#endif
	UCSRB =(1<<TXEN) |(1<<RXEN); // включаем прием/передачу
 838:	88 e1       	ldi	r24, 0x18	; 24
 83a:	8a b9       	out	0x0a, r24	; 10
 83c:	08 95       	ret

0000083e <uart_putc>:
}

inline void uart_putc(unsigned char data) // Функция отправки одного символа (байта) (синтаксис uart_putc('a'))
{
	
	while ( !( UCSRA & (1<<UDRE) ) ); // ждем пока освободится регистр UDR
 83e:	5d 9b       	sbis	0x0b, 5	; 11
 840:	fe cf       	rjmp	.-4      	; 0x83e <uart_putc>
	UDR = data;						   // начинаем передачу
 842:	8c b9       	out	0x0c, r24	; 12
	if (data != 8)
 844:	88 30       	cpi	r24, 0x08	; 8
 846:	51 f0       	breq	.+20     	; 0x85c <uart_putc+0x1e>
	cSend++; // увеличиваем счетчик отправленных символов
 848:	80 91 02 01 	lds	r24, 0x0102
 84c:	90 91 03 01 	lds	r25, 0x0103
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	90 93 03 01 	sts	0x0103, r25
 856:	80 93 02 01 	sts	0x0102, r24
 85a:	08 95       	ret
	else
	cSend--; // если отослали backspace уменьшаем счетчик отправленных символов
 85c:	80 91 02 01 	lds	r24, 0x0102
 860:	90 91 03 01 	lds	r25, 0x0103
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	90 93 03 01 	sts	0x0103, r25
 86a:	80 93 02 01 	sts	0x0102, r24
 86e:	08 95       	ret

00000870 <uart_write>:
	while ( !(UCSRA & (1<<RXC)) );   // ждем прихода символа
	return UDR;						  // получаем результат
}

inline void uart_write (char *str)	// функция передачи строки
{
 870:	fc 01       	movw	r30, r24
	for(int i = 0; str[i]; ++i)
 872:	90 81       	ld	r25, Z
 874:	99 23       	and	r25, r25
 876:	e9 f0       	breq	.+58     	; 0x8b2 <uart_write+0x42>
 878:	31 96       	adiw	r30, 0x01	; 1
}

inline void uart_putc(unsigned char data) // Функция отправки одного символа (байта) (синтаксис uart_putc('a'))
{
	
	while ( !( UCSRA & (1<<UDRE) ) ); // ждем пока освободится регистр UDR
 87a:	5d 9b       	sbis	0x0b, 5	; 11
 87c:	fe cf       	rjmp	.-4      	; 0x87a <uart_write+0xa>
	UDR = data;						   // начинаем передачу
 87e:	9c b9       	out	0x0c, r25	; 12
	if (data != 8)
 880:	98 30       	cpi	r25, 0x08	; 8
 882:	59 f0       	breq	.+22     	; 0x89a <uart_write+0x2a>
	cSend++; // увеличиваем счетчик отправленных символов
 884:	20 91 02 01 	lds	r18, 0x0102
 888:	30 91 03 01 	lds	r19, 0x0103
 88c:	2f 5f       	subi	r18, 0xFF	; 255
 88e:	3f 4f       	sbci	r19, 0xFF	; 255
 890:	30 93 03 01 	sts	0x0103, r19
 894:	20 93 02 01 	sts	0x0102, r18
 898:	09 c0       	rjmp	.+18     	; 0x8ac <uart_write+0x3c>
	else
	cSend--; // если отослали backspace уменьшаем счетчик отправленных символов
 89a:	80 91 02 01 	lds	r24, 0x0102
 89e:	90 91 03 01 	lds	r25, 0x0103
 8a2:	01 97       	sbiw	r24, 0x01	; 1
 8a4:	90 93 03 01 	sts	0x0103, r25
 8a8:	80 93 02 01 	sts	0x0102, r24
	return UDR;						  // получаем результат
}

inline void uart_write (char *str)	// функция передачи строки
{
	for(int i = 0; str[i]; ++i)
 8ac:	91 91       	ld	r25, Z+
 8ae:	91 11       	cpse	r25, r1
 8b0:	e4 cf       	rjmp	.-56     	; 0x87a <uart_write+0xa>
 8b2:	08 95       	ret

000008b4 <__divmodhi4>:
 8b4:	97 fb       	bst	r25, 7
 8b6:	07 2e       	mov	r0, r23
 8b8:	16 f4       	brtc	.+4      	; 0x8be <__divmodhi4+0xa>
 8ba:	00 94       	com	r0
 8bc:	07 d0       	rcall	.+14     	; 0x8cc <__divmodhi4_neg1>
 8be:	77 fd       	sbrc	r23, 7
 8c0:	09 d0       	rcall	.+18     	; 0x8d4 <__divmodhi4_neg2>
 8c2:	0e 94 90 04 	call	0x920	; 0x920 <__udivmodhi4>
 8c6:	07 fc       	sbrc	r0, 7
 8c8:	05 d0       	rcall	.+10     	; 0x8d4 <__divmodhi4_neg2>
 8ca:	3e f4       	brtc	.+14     	; 0x8da <__divmodhi4_exit>

000008cc <__divmodhi4_neg1>:
 8cc:	90 95       	com	r25
 8ce:	81 95       	neg	r24
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	08 95       	ret

000008d4 <__divmodhi4_neg2>:
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255

000008da <__divmodhi4_exit>:
 8da:	08 95       	ret

000008dc <__udivmodsi4>:
 8dc:	a1 e2       	ldi	r26, 0x21	; 33
 8de:	1a 2e       	mov	r1, r26
 8e0:	aa 1b       	sub	r26, r26
 8e2:	bb 1b       	sub	r27, r27
 8e4:	fd 01       	movw	r30, r26
 8e6:	0d c0       	rjmp	.+26     	; 0x902 <__udivmodsi4_ep>

000008e8 <__udivmodsi4_loop>:
 8e8:	aa 1f       	adc	r26, r26
 8ea:	bb 1f       	adc	r27, r27
 8ec:	ee 1f       	adc	r30, r30
 8ee:	ff 1f       	adc	r31, r31
 8f0:	a2 17       	cp	r26, r18
 8f2:	b3 07       	cpc	r27, r19
 8f4:	e4 07       	cpc	r30, r20
 8f6:	f5 07       	cpc	r31, r21
 8f8:	20 f0       	brcs	.+8      	; 0x902 <__udivmodsi4_ep>
 8fa:	a2 1b       	sub	r26, r18
 8fc:	b3 0b       	sbc	r27, r19
 8fe:	e4 0b       	sbc	r30, r20
 900:	f5 0b       	sbc	r31, r21

00000902 <__udivmodsi4_ep>:
 902:	66 1f       	adc	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	1a 94       	dec	r1
 90c:	69 f7       	brne	.-38     	; 0x8e8 <__udivmodsi4_loop>
 90e:	60 95       	com	r22
 910:	70 95       	com	r23
 912:	80 95       	com	r24
 914:	90 95       	com	r25
 916:	9b 01       	movw	r18, r22
 918:	ac 01       	movw	r20, r24
 91a:	bd 01       	movw	r22, r26
 91c:	cf 01       	movw	r24, r30
 91e:	08 95       	ret

00000920 <__udivmodhi4>:
 920:	aa 1b       	sub	r26, r26
 922:	bb 1b       	sub	r27, r27
 924:	51 e1       	ldi	r21, 0x11	; 17
 926:	07 c0       	rjmp	.+14     	; 0x936 <__udivmodhi4_ep>

00000928 <__udivmodhi4_loop>:
 928:	aa 1f       	adc	r26, r26
 92a:	bb 1f       	adc	r27, r27
 92c:	a6 17       	cp	r26, r22
 92e:	b7 07       	cpc	r27, r23
 930:	10 f0       	brcs	.+4      	; 0x936 <__udivmodhi4_ep>
 932:	a6 1b       	sub	r26, r22
 934:	b7 0b       	sbc	r27, r23

00000936 <__udivmodhi4_ep>:
 936:	88 1f       	adc	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	5a 95       	dec	r21
 93c:	a9 f7       	brne	.-22     	; 0x928 <__udivmodhi4_loop>
 93e:	80 95       	com	r24
 940:	90 95       	com	r25
 942:	bc 01       	movw	r22, r24
 944:	cd 01       	movw	r24, r26
 946:	08 95       	ret

00000948 <do_rand>:
 948:	8f 92       	push	r8
 94a:	9f 92       	push	r9
 94c:	af 92       	push	r10
 94e:	bf 92       	push	r11
 950:	cf 92       	push	r12
 952:	df 92       	push	r13
 954:	ef 92       	push	r14
 956:	ff 92       	push	r15
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	ec 01       	movw	r28, r24
 95e:	68 81       	ld	r22, Y
 960:	79 81       	ldd	r23, Y+1	; 0x01
 962:	8a 81       	ldd	r24, Y+2	; 0x02
 964:	9b 81       	ldd	r25, Y+3	; 0x03
 966:	61 15       	cp	r22, r1
 968:	71 05       	cpc	r23, r1
 96a:	81 05       	cpc	r24, r1
 96c:	91 05       	cpc	r25, r1
 96e:	21 f4       	brne	.+8      	; 0x978 <do_rand+0x30>
 970:	64 e2       	ldi	r22, 0x24	; 36
 972:	79 ed       	ldi	r23, 0xD9	; 217
 974:	8b e5       	ldi	r24, 0x5B	; 91
 976:	97 e0       	ldi	r25, 0x07	; 7
 978:	2d e1       	ldi	r18, 0x1D	; 29
 97a:	33 ef       	ldi	r19, 0xF3	; 243
 97c:	41 e0       	ldi	r20, 0x01	; 1
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	0e 94 00 05 	call	0xa00	; 0xa00 <__divmodsi4>
 984:	49 01       	movw	r8, r18
 986:	5a 01       	movw	r10, r20
 988:	9b 01       	movw	r18, r22
 98a:	ac 01       	movw	r20, r24
 98c:	a7 ea       	ldi	r26, 0xA7	; 167
 98e:	b1 e4       	ldi	r27, 0x41	; 65
 990:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__muluhisi3>
 994:	6b 01       	movw	r12, r22
 996:	7c 01       	movw	r14, r24
 998:	ac ee       	ldi	r26, 0xEC	; 236
 99a:	b4 ef       	ldi	r27, 0xF4	; 244
 99c:	a5 01       	movw	r20, r10
 99e:	94 01       	movw	r18, r8
 9a0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__mulohisi3>
 9a4:	dc 01       	movw	r26, r24
 9a6:	cb 01       	movw	r24, r22
 9a8:	8c 0d       	add	r24, r12
 9aa:	9d 1d       	adc	r25, r13
 9ac:	ae 1d       	adc	r26, r14
 9ae:	bf 1d       	adc	r27, r15
 9b0:	b7 ff       	sbrs	r27, 7
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <do_rand+0x72>
 9b4:	01 97       	sbiw	r24, 0x01	; 1
 9b6:	a1 09       	sbc	r26, r1
 9b8:	b0 48       	sbci	r27, 0x80	; 128
 9ba:	88 83       	st	Y, r24
 9bc:	99 83       	std	Y+1, r25	; 0x01
 9be:	aa 83       	std	Y+2, r26	; 0x02
 9c0:	bb 83       	std	Y+3, r27	; 0x03
 9c2:	9f 77       	andi	r25, 0x7F	; 127
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	ff 90       	pop	r15
 9ca:	ef 90       	pop	r14
 9cc:	df 90       	pop	r13
 9ce:	cf 90       	pop	r12
 9d0:	bf 90       	pop	r11
 9d2:	af 90       	pop	r10
 9d4:	9f 90       	pop	r9
 9d6:	8f 90       	pop	r8
 9d8:	08 95       	ret

000009da <rand_r>:
 9da:	0e 94 a4 04 	call	0x948	; 0x948 <do_rand>
 9de:	08 95       	ret

000009e0 <rand>:
 9e0:	80 e6       	ldi	r24, 0x60	; 96
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 a4 04 	call	0x948	; 0x948 <do_rand>
 9e8:	08 95       	ret

000009ea <srand>:
 9ea:	a0 e0       	ldi	r26, 0x00	; 0
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	80 93 60 00 	sts	0x0060, r24
 9f2:	90 93 61 00 	sts	0x0061, r25
 9f6:	a0 93 62 00 	sts	0x0062, r26
 9fa:	b0 93 63 00 	sts	0x0063, r27
 9fe:	08 95       	ret

00000a00 <__divmodsi4>:
 a00:	05 2e       	mov	r0, r21
 a02:	97 fb       	bst	r25, 7
 a04:	1e f4       	brtc	.+6      	; 0xa0c <__divmodsi4+0xc>
 a06:	00 94       	com	r0
 a08:	0e 94 17 05 	call	0xa2e	; 0xa2e <__negsi2>
 a0c:	57 fd       	sbrc	r21, 7
 a0e:	07 d0       	rcall	.+14     	; 0xa1e <__divmodsi4_neg2>
 a10:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__udivmodsi4>
 a14:	07 fc       	sbrc	r0, 7
 a16:	03 d0       	rcall	.+6      	; 0xa1e <__divmodsi4_neg2>
 a18:	4e f4       	brtc	.+18     	; 0xa2c <__divmodsi4_exit>
 a1a:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__negsi2>

00000a1e <__divmodsi4_neg2>:
 a1e:	50 95       	com	r21
 a20:	40 95       	com	r20
 a22:	30 95       	com	r19
 a24:	21 95       	neg	r18
 a26:	3f 4f       	sbci	r19, 0xFF	; 255
 a28:	4f 4f       	sbci	r20, 0xFF	; 255
 a2a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a2c <__divmodsi4_exit>:
 a2c:	08 95       	ret

00000a2e <__negsi2>:
 a2e:	90 95       	com	r25
 a30:	80 95       	com	r24
 a32:	70 95       	com	r23
 a34:	61 95       	neg	r22
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	08 95       	ret

00000a3e <__muluhisi3>:
 a3e:	0e 94 32 05 	call	0xa64	; 0xa64 <__umulhisi3>
 a42:	a5 9f       	mul	r26, r21
 a44:	90 0d       	add	r25, r0
 a46:	b4 9f       	mul	r27, r20
 a48:	90 0d       	add	r25, r0
 a4a:	a4 9f       	mul	r26, r20
 a4c:	80 0d       	add	r24, r0
 a4e:	91 1d       	adc	r25, r1
 a50:	11 24       	eor	r1, r1
 a52:	08 95       	ret

00000a54 <__mulshisi3>:
 a54:	b7 ff       	sbrs	r27, 7
 a56:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__muluhisi3>

00000a5a <__mulohisi3>:
 a5a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__muluhisi3>
 a5e:	82 1b       	sub	r24, r18
 a60:	93 0b       	sbc	r25, r19
 a62:	08 95       	ret

00000a64 <__umulhisi3>:
 a64:	a2 9f       	mul	r26, r18
 a66:	b0 01       	movw	r22, r0
 a68:	b3 9f       	mul	r27, r19
 a6a:	c0 01       	movw	r24, r0
 a6c:	a3 9f       	mul	r26, r19
 a6e:	70 0d       	add	r23, r0
 a70:	81 1d       	adc	r24, r1
 a72:	11 24       	eor	r1, r1
 a74:	91 1d       	adc	r25, r1
 a76:	b2 9f       	mul	r27, r18
 a78:	70 0d       	add	r23, r0
 a7a:	81 1d       	adc	r24, r1
 a7c:	11 24       	eor	r1, r1
 a7e:	91 1d       	adc	r25, r1
 a80:	08 95       	ret

00000a82 <_exit>:
 a82:	f8 94       	cli

00000a84 <__stop_program>:
 a84:	ff cf       	rjmp	.-2      	; 0xa84 <__stop_program>
