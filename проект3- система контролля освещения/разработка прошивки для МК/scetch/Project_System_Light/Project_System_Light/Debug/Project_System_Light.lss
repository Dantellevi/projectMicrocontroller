
Project_System_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00800060  00000f34  00000fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008001f0  008001f0  00001158  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000295c  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e32  00000000  00000000  00004727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  0000555c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071f  00000000  00000000  00005b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002317  00000000  00000000  0000628b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000085a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 81 00 	jmp	0x102	; 0x102 <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
   8:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  10:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  14:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  18:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  1c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  20:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  24:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  28:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  2c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_11>
  30:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  3c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  40:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  44:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  4c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  50:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  54:	99 04       	cpc	r9, r9
  56:	b7 04       	cpc	r11, r7
  58:	b7 04       	cpc	r11, r7
  5a:	b7 04       	cpc	r11, r7
  5c:	6d 04       	cpc	r6, r13
  5e:	b7 04       	cpc	r11, r7
  60:	b7 04       	cpc	r11, r7
  62:	b7 04       	cpc	r11, r7
  64:	b7 04       	cpc	r11, r7
  66:	b7 04       	cpc	r11, r7
  68:	b7 04       	cpc	r11, r7
  6a:	b7 04       	cpc	r11, r7
  6c:	b7 04       	cpc	r11, r7
  6e:	b7 04       	cpc	r11, r7
  70:	b7 04       	cpc	r11, r7
  72:	b7 04       	cpc	r11, r7
  74:	41 04       	cpc	r4, r1
  76:	83 04       	cpc	r8, r3
  78:	b7 04       	cpc	r11, r7
  7a:	b7 04       	cpc	r11, r7
  7c:	b7 04       	cpc	r11, r7
  7e:	b7 04       	cpc	r11, r7
  80:	57 04       	cpc	r5, r7
  82:	b7 04       	cpc	r11, r7
  84:	b7 04       	cpc	r11, r7
  86:	b7 04       	cpc	r11, r7
  88:	b7 04       	cpc	r11, r7
  8a:	b7 04       	cpc	r11, r7
  8c:	b7 04       	cpc	r11, r7
  8e:	b7 04       	cpc	r11, r7
  90:	b7 04       	cpc	r11, r7
  92:	b7 04       	cpc	r11, r7
  94:	a8 04       	cpc	r10, r8
  96:	b7 04       	cpc	r11, r7
  98:	b7 04       	cpc	r11, r7
  9a:	b7 04       	cpc	r11, r7
  9c:	78 04       	cpc	r7, r8
  9e:	b7 04       	cpc	r11, r7
  a0:	b7 04       	cpc	r11, r7
  a2:	b7 04       	cpc	r11, r7
  a4:	b7 04       	cpc	r11, r7
  a6:	b7 04       	cpc	r11, r7
  a8:	b7 04       	cpc	r11, r7
  aa:	b7 04       	cpc	r11, r7
  ac:	b7 04       	cpc	r11, r7
  ae:	b7 04       	cpc	r11, r7
  b0:	b7 04       	cpc	r11, r7
  b2:	b7 04       	cpc	r11, r7
  b4:	4c 04       	cpc	r4, r12
  b6:	8e 04       	cpc	r8, r14
  b8:	b7 04       	cpc	r11, r7
  ba:	b7 04       	cpc	r11, r7
  bc:	b7 04       	cpc	r11, r7
  be:	b7 04       	cpc	r11, r7
  c0:	62 04       	cpc	r6, r2

000000c2 <__trampolines_end>:
  c2:	41 a0       	ldd	r4, Z+33	; 0x21
  c4:	42 a1       	ldd	r20, Z+34	; 0x22
  c6:	e0 45       	sbci	r30, 0x50	; 80
  c8:	a3 a4       	ldd	r10, Z+43	; 0x2b
  ca:	a5 a6       	std	Z+45, r10	; 0x2d
  cc:	4b a7       	std	Y+43, r20	; 0x2b
  ce:	4d 48       	sbci	r20, 0x8D	; 141
  d0:	4f a8       	ldd	r4, Y+55	; 0x37
  d2:	50 43       	sbci	r21, 0x30	; 48
  d4:	54 a9       	ldd	r21, Z+52	; 0x34
  d6:	aa 58       	subi	r26, 0x8A	; 138
  d8:	e1 ab       	std	Z+49, r30	; 0x31
  da:	ac e2       	ldi	r26, 0x2C	; 44
  dc:	ad ae       	std	Y+61, r10	; 0x3d
  de:	ad af       	std	Y+61, r26	; 0x3d
  e0:	b0 b1       	in	r27, 0x00	; 0
  e2:	61 b2       	in	r6, 0x11	; 17
  e4:	b3 b4       	in	r11, 0x23	; 35
  e6:	e3 65       	ori	r30, 0x53	; 83
  e8:	b6 b7       	in	r27, 0x36	; 54
  ea:	b8 b9       	out	0x08, r27	; 8
  ec:	ba bb       	out	0x1a, r27	; 26
  ee:	bc bd       	out	0x2c, r27	; 44
  f0:	6f be       	out	0x3f, r6	; 63
  f2:	70 63       	ori	r23, 0x30	; 48
  f4:	bf 79       	andi	r27, 0x9F	; 159
  f6:	e4 78       	andi	r30, 0x84	; 132
  f8:	e5 c0       	rjmp	.+458    	; 0x2c4 <LCDinit+0xe>
  fa:	c1 e6       	ldi	r28, 0x61	; 97
  fc:	c2 c3       	rjmp	.+1924   	; 0x882 <USART_Control+0x18>
  fe:	c4 c5       	rjmp	.+2952   	; 0xc88 <main+0x308>
 100:	c6 c7       	rjmp	.+3980   	; 0x108e <_etext+0x15a>

00000102 <__ctors_end>:
 102:	11 24       	eor	r1, r1
 104:	1f be       	out	0x3f, r1	; 63
 106:	cf e5       	ldi	r28, 0x5F	; 95
 108:	d4 e0       	ldi	r29, 0x04	; 4
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	cd bf       	out	0x3d, r28	; 61

0000010e <__do_copy_data>:
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	a0 e6       	ldi	r26, 0x60	; 96
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e4 e3       	ldi	r30, 0x34	; 52
 116:	ff e0       	ldi	r31, 0x0F	; 15
 118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x10>
 11a:	05 90       	lpm	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	a0 3f       	cpi	r26, 0xF0	; 240
 120:	b1 07       	cpc	r27, r17
 122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0xc>

00000124 <__do_clear_bss>:
 124:	22 e0       	ldi	r18, 0x02	; 2
 126:	a0 ef       	ldi	r26, 0xF0	; 240
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
 12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
 12e:	aa 30       	cpi	r26, 0x0A	; 10
 130:	b2 07       	cpc	r27, r18
 132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
 134:	0e 94 c0 04 	call	0x980	; 0x980 <main>
 138:	0c 94 98 07 	jmp	0xf30	; 0xf30 <_exit>

0000013c <__bad_interrupt>:
 13c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000140 <Init_I2C>:

 #include "I2C.h"

 void Init_I2C(void)
 {
 TWBR=0x20;//скорость передачи состовляет 100кГц
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	80 b9       	out	0x00, r24	; 0
 144:	08 95       	ret

00000146 <Start_I2C>:
 }

 void Start_I2C(void)
 {

 TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//начало передачи
 146:	84 ea       	ldi	r24, 0xA4	; 164
 148:	86 bf       	out	0x36, r24	; 54
 while(!(TWCR&(1<<TWINT)));//ожидание установки флага
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <Start_I2C+0x4>

 }
 150:	08 95       	ret

00000152 <Stop_I2C>:

 void Stop_I2C(void)
 {

 TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//конец передачи
 152:	84 e9       	ldi	r24, 0x94	; 148
 154:	86 bf       	out	0x36, r24	; 54
 156:	08 95       	ret

00000158 <Sendbyte_I2C>:
 }

 void Sendbyte_I2C(unsigned char data)
 {

 TWDR=data;//помещаем данные в регистр данных
 158:	83 b9       	out	0x03, r24	; 3
 TWCR=(1<<TWINT)|(1<<TWEN);//установка флагов для занесения данных в регистр
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	86 bf       	out	0x36, r24	; 54
 while(!(TWCR&(1<<TWINT)));//ожидание установки флагов
 15e:	06 b6       	in	r0, 0x36	; 54
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <Sendbyte_I2C+0x6>

 }
 164:	08 95       	ret

00000166 <SendByte_Addr>:

 void SendByte_Addr(unsigned char data, unsigned char Adress)
 {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	c8 2f       	mov	r28, r24
 16c:	d6 2f       	mov	r29, r22

 Start_I2C();//начало передачи
 16e:	0e 94 a3 00 	call	0x146	; 0x146 <Start_I2C>
 Sendbyte_I2C(Adress);//в старший разряд передаем адрес
 172:	8d 2f       	mov	r24, r29
 174:	0e 94 ac 00 	call	0x158	; 0x158 <Sendbyte_I2C>
 Sendbyte_I2C(data);//в младший передаем данные
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 ac 00 	call	0x158	; 0x158 <Sendbyte_I2C>
 }

 void Stop_I2C(void)
 {

 TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);//конец передачи
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	86 bf       	out	0x36, r24	; 54
 Start_I2C();//начало передачи
 Sendbyte_I2C(Adress);//в старший разряд передаем адрес
 Sendbyte_I2C(data);//в младший передаем данные
 Stop_I2C();//конец передачи

 }
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <Readbyte_I2C>:

 unsigned char Readbyte_I2C(void)
 {

 TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);//формируем запрос на данные
 188:	84 ec       	ldi	r24, 0xC4	; 196
 18a:	86 bf       	out	0x36, r24	; 54
 while(!(TWCR&(1<<TWINT)));//ожидаем 
 18c:	06 b6       	in	r0, 0x36	; 54
 18e:	07 fe       	sbrs	r0, 7
 190:	fd cf       	rjmp	.-6      	; 0x18c <Readbyte_I2C+0x4>
 return TWDR;//получаем данные от ведомого 
 192:	83 b1       	in	r24, 0x03	; 3
 }
 194:	08 95       	ret

00000196 <OutPin>:
	BCD_Calc(digit, value, flag, buf, i, 100000000);
	BCD_Calc(digit, value, flag, buf, i, 10000000);
	BCD_Calc(digit, value, flag, buf, i, 1000000);
	BCD_Calc(digit, value, flag, buf, i, 100000);
	BCD_Calc(digit, value, flag, buf, i, 10000);
	BCD_Calc(digit, value, flag, buf, i, 1000);
 196:	8a b3       	in	r24, 0x1a	; 26
 198:	80 6f       	ori	r24, 0xF0	; 240
 19a:	8a bb       	out	0x1a, r24	; 26
 19c:	8b b3       	in	r24, 0x1b	; 27
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret

000001a4 <Strob>:
 1a4:	db 9a       	sbi	0x1b, 3	; 27
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <Strob+0x4>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <Strob+0xa>
 1ae:	db 98       	cbi	0x1b, 3	; 27
 1b0:	08 95       	ret

000001b2 <Busy_flag>:
 1b2:	cf 93       	push	r28
	BCD_Calc(digit, value, flag, buf, i, 100);
 1b4:	8a b3       	in	r24, 0x1a	; 26
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	8b b3       	in	r24, 0x1b	; 27
 1bc:	80 6f       	ori	r24, 0xF0	; 240
 1be:	8b bb       	out	0x1b, r24	; 27
 1c0:	d9 9a       	sbi	0x1b, 1	; 27
 1c2:	db 9a       	sbi	0x1b, 3	; 27
 1c4:	00 00       	nop
 1c6:	00 00       	nop
 1c8:	c9 b3       	in	r28, 0x19	; 25
 1ca:	db 98       	cbi	0x1b, 3	; 27
 1cc:	00 00       	nop
 1ce:	00 00       	nop
 1d0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Strob>
 1d4:	00 00       	nop
 1d6:	00 00       	nop
 1d8:	cc 23       	and	r28, r28
 1da:	9c f3       	brlt	.-26     	; 0x1c2 <Busy_flag+0x10>
 1dc:	d9 98       	cbi	0x1b, 1	; 27
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <Send_byte>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	d8 2f       	mov	r29, r24
 1e8:	0e 94 cb 00 	call	0x196	; 0x196 <OutPin>
	BCD_Calc(digit, value, flag, buf, i, 10);
 1ec:	9d 2f       	mov	r25, r29
 1ee:	92 95       	swap	r25
 1f0:	9f 70       	andi	r25, 0x0F	; 15
 1f2:	cd 2f       	mov	r28, r29
 1f4:	cf 70       	andi	r28, 0x0F	; 15
 1f6:	90 fd       	sbrc	r25, 0
 1f8:	dc 9a       	sbi	0x1b, 4	; 27
 1fa:	96 95       	lsr	r25
 1fc:	90 fd       	sbrc	r25, 0
 1fe:	dd 9a       	sbi	0x1b, 5	; 27
 200:	96 95       	lsr	r25
 202:	90 fd       	sbrc	r25, 0
 204:	de 9a       	sbi	0x1b, 6	; 27
 206:	96 95       	lsr	r25
 208:	09 f0       	breq	.+2      	; 0x20c <Send_byte+0x2a>
 20a:	df 9a       	sbi	0x1b, 7	; 27
 20c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Strob>
 210:	0e 94 cb 00 	call	0x196	; 0x196 <OutPin>
 214:	d0 fd       	sbrc	r29, 0
	
	value += BCD_SYMBOL;
	BCD_SaveDataInBuf(value, buf, i);
 216:	dc 9a       	sbi	0x1b, 4	; 27
 218:	8c 2f       	mov	r24, r28
 21a:	86 95       	lsr	r24
	BCD_Calc(digit, value, flag, buf, i, 10000);
	BCD_Calc(digit, value, flag, buf, i, 1000);
	BCD_Calc(digit, value, flag, buf, i, 100);
	BCD_Calc(digit, value, flag, buf, i, 10);
	
	value += BCD_SYMBOL;
 21c:	80 fd       	sbrc	r24, 0
 21e:	dd 9a       	sbi	0x1b, 5	; 27
 220:	86 95       	lsr	r24
	BCD_SaveDataInBuf(value, buf, i);
 222:	80 fd       	sbrc	r24, 0
	BCD_AddEndStrInBuf(0, buf, i);
 224:	de 9a       	sbi	0x1b, 6	; 27
 226:	86 95       	lsr	r24
			if ((lowb&1)==1)
			{
				DPORT|=(1<<DB6);
			}
			lowb=lowb>>1;
			if ((lowb&1)==1)
 228:	09 f0       	breq	.+2      	; 0x22c <Send_byte+0x4a>
			{
				DPORT|=(1<<DB7);
 22a:	df 9a       	sbi	0x1b, 7	; 27
			}
	
			Strob();
 22c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Strob>
{
	#ifdef  LCD_8BIT
			DDDR =0;
			DPORT=0;
	#else
			DDDR &=~((1<<DB7)|(1<<DB6)|(1<<DB5)|(1<<DB4));
 230:	8a b3       	in	r24, 0x1a	; 26
 232:	8f 70       	andi	r24, 0x0F	; 15
 234:	8a bb       	out	0x1a, r24	; 26
			DPORT&=~((1<<DB7)|(1<<DB6)|(1<<DB5)|(1<<DB4));
 236:	8b b3       	in	r24, 0x1b	; 27
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	8b bb       	out	0x1b, r24	; 27
	
			Strob();
	#endif
	
	HiPin();
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <LCDcommand>:
	LCDcommand(0b10);
}

//Системные функции, их не трогаем, они для работы дисплея.
static void LCDcommand(uint8_t i)	//Отправка команды, настройка дисплея.
{
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
	Busy_flag();	//Проверим сперва флаг занятости, а свободен ли дисплей?
 246:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Busy_flag>
	Send_byte(i);
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Send_byte>
}
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <LCDdata>:
};

//Пользовательские функции для LCD, ими пользуемся в программе.
#if 1
void LCDdata(uint8_t i)						//Отправка символа для отображения на дисплее.
{
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
	Busy_flag();	//Проверим сперва флаг занятости, а свободен ли дисплей?
 258:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Busy_flag>
	CPORT|=(1<<RS); //RS=1 посылаем данные в LCD
 25c:	da 9a       	sbi	0x1b, 2	; 27
	CPORT&=~(1<<E);//Выключили строб.
}
static uint8_t lcd_rus(uint8_t c)
{

	if  (c > 191)
 25e:	c0 3c       	cpi	r28, 0xC0	; 192
 260:	30 f0       	brcs	.+12     	; 0x26e <LCDdata+0x1a>
	{
		c -=192;
 262:	e0 e4       	ldi	r30, 0x40	; 64
 264:	ec 0f       	add	r30, r28
		c= pgm_read_byte(&convert_HD44780[c]);
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ee 53       	subi	r30, 0x3E	; 62
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	c4 91       	lpm	r28, Z
#if 1
void LCDdata(uint8_t i)						//Отправка символа для отображения на дисплее.
{
	Busy_flag();	//Проверим сперва флаг занятости, а свободен ли дисплей?
	CPORT|=(1<<RS); //RS=1 посылаем данные в LCD
	Send_byte(lcd_rus(i));
 26e:	8c 2f       	mov	r24, r28
 270:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Send_byte>
	CPORT&=~(1<<RS);//RS=0
 274:	da 98       	cbi	0x1b, 2	; 27
}
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <LCDGotoXY>:
}
void LCDGotoXY(uint8_t x,uint8_t y)			//Устанавливаем курсор в X, Y позицию
{
	 uint8_t Address;
	
	switch(y)
 27a:	62 30       	cpi	r22, 0x02	; 2
 27c:	31 f0       	breq	.+12     	; 0x28a <LCDGotoXY+0x10>
 27e:	63 30       	cpi	r22, 0x03	; 3
 280:	31 f0       	breq	.+12     	; 0x28e <LCDGotoXY+0x14>
 282:	61 30       	cpi	r22, 0x01	; 1
 284:	29 f4       	brne	.+10     	; 0x290 <LCDGotoXY+0x16>
	{
		case 0: Address = LINE0+x; 
				break;
		case 1: Address = LINE1+x; 
 286:	80 5c       	subi	r24, 0xC0	; 192
				break;
 288:	03 c0       	rjmp	.+6      	; 0x290 <LCDGotoXY+0x16>
		case 2: Address = LINE2+x;
 28a:	8c 5e       	subi	r24, 0xEC	; 236
				break;
 28c:	01 c0       	rjmp	.+2      	; 0x290 <LCDGotoXY+0x16>
		case 3: Address = LINE3+x;
 28e:	8c 5a       	subi	r24, 0xAC	; 172
				break;
		default: Address = LINE0+x;
	}
	
	LCDcommand(1<<7 | Address);
 290:	80 68       	ori	r24, 0x80	; 128
 292:	0e 94 21 01 	call	0x242	; 0x242 <LCDcommand>
 296:	08 95       	ret

00000298 <LCDsendString>:
	{
		LCDdata(*i++ );
	}
}
void LCDsendString(char *s)//Вывести строку на дисплей.
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
	while( *s )
 29e:	88 81       	ld	r24, Y
 2a0:	88 23       	and	r24, r24
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <LCDsendString+0x18>
 2a4:	21 96       	adiw	r28, 0x01	; 1
	{
		LCDdata(*s++ );
 2a6:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
		LCDdata(*i++ );
	}
}
void LCDsendString(char *s)//Вывести строку на дисплей.
{
	while( *s )
 2aa:	89 91       	ld	r24, Y+
 2ac:	81 11       	cpse	r24, r1
 2ae:	fb cf       	rjmp	.-10     	; 0x2a6 <LCDsendString+0xe>
	{
		LCDdata(*s++ );
	}
	
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCDinit>:
	{
		LCDdata((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
void LCDinit(void)							//Инициализируем дисплей
{
 2b6:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	80 e7       	ldi	r24, 0x70	; 112
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <LCDinit+0x8>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDinit+0x12>
 2c8:	00 00       	nop
	//Перед инициализацией LCD, надо в init задержку в 100 мсек сделать, чтоб питание устаканилось. 
	_delay_ms(100);
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
 2ca:	8a b3       	in	r24, 0x1a	; 26
 2cc:	8e 60       	ori	r24, 0x0E	; 14
 2ce:	8a bb       	out	0x1a, r24	; 26
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
 2d0:	8b b3       	in	r24, 0x1b	; 27
 2d2:	81 7f       	andi	r24, 0xF1	; 241
 2d4:	8b bb       	out	0x1b, r24	; 27
	OutPin();						   //Настройка портов
 2d6:	0e 94 cb 00 	call	0x196	; 0x196 <OutPin>
 2da:	c3 e0       	ldi	r28, 0x03	; 3
	while (i!=3)
	{
		#ifdef  LCD_8BIT       //отправка символа 0x30.
		        DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4)|(0<<DB3)|(0<<DB2)|(0<<DB1)|(0<<DB0);
		#else
				DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4);
 2dc:	8b b3       	in	r24, 0x1b	; 27
 2de:	80 63       	ori	r24, 0x30	; 48
 2e0:	8b bb       	out	0x1b, r24	; 27
		#endif
		
		Strob();
 2e2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Strob>
 2e6:	8f e0       	ldi	r24, 0x0F	; 15
 2e8:	97 e2       	ldi	r25, 0x27	; 39
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCDinit+0x34>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCDinit+0x3a>
 2f0:	00 00       	nop
 2f2:	c1 50       	subi	r28, 0x01	; 1
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
	OutPin();						   //Настройка портов
	
	uint8_t i=0;
	while (i!=3)
 2f4:	99 f7       	brne	.-26     	; 0x2dc <LCDinit+0x26>
	//Разминочный этап закончен, далее переходим к основным упражнениям.
	
	#ifdef  LCD_8BIT
			LCDcommand(0b00111000);//8ми битный интерфейс, две строки, 5x8 точек.
	#else   //Первый раз отправляем только пол старшей тетрады
			Busy_flag();
 2f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Busy_flag>
			OutPin();
 2fa:	0e 94 cb 00 	call	0x196	; 0x196 <OutPin>
			DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(0<<DB4);//4х битный интерфейс 
 2fe:	dd 9a       	sbi	0x1b, 5	; 27
			Strob();
 300:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <Strob>
			LCDcommand(0b00101000);//Две строки, 5x8 точек.
 304:	88 e2       	ldi	r24, 0x28	; 40
 306:	0e 94 21 01 	call	0x242	; 0x242 <LCDcommand>
	#endif
	
	LCDcommand(0b1100);  //Включаем дисплей + без отображения курсоров.
 30a:	8c e0       	ldi	r24, 0x0C	; 12
 30c:	0e 94 21 01 	call	0x242	; 0x242 <LCDcommand>
	LCDcommand(0b110);   //Счетчик адреса всегда будет смещаться на n+1
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	0e 94 21 01 	call	0x242	; 0x242 <LCDcommand>
	LCDcommand(0b10);    //курсор в позицию 0,0 + сброс всех сдвигов
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 21 01 	call	0x242	; 0x242 <LCDcommand>
	LCDcommand(0b1);     //очистка дисплея 
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 21 01 	call	0x242	; 0x242 <LCDcommand>
	//Основные упражнения закончены. Переходим к релаксации.
}
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <LCDclear>:
{
	LCDcommand(0b1100);
}
void LCDclear(void)			//Очистка дисплея + курсор на позицию 0,0
{
	LCDcommand(0b1);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 21 01 	call	0x242	; 0x242 <LCDcommand>
 32c:	08 95       	ret

0000032e <LCD_write_int>:
	BCD_SendData(value);
}


void LCD_write_int(unsigned int val)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	e2 97       	sbiw	r28, 0x32	; 50
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	be 01       	movw	r22, r28
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	0e 94 63 07 	call	0xec6	; 0xec6 <__itoa_ncheck>
char str1[50];
itoa(val,str1,10);
LCDsendString(str1);
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>

}
 356:	e2 96       	adiw	r28, 0x32	; 50
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <__vector_11>:
unsigned char flag_adjust_work4=0;

unsigned char flag_del=0;
unsigned char flg_control_USART=0;
ISR(USART_RXC_vect)//прерывания по приходу данных по USART
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	8f 93       	push	r24

flg_control_USART=UDR;
 374:	8c b1       	in	r24, 0x0c	; 12
 376:	80 93 f0 01 	sts	0x01F0, r24

}
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <Port_init>:

void Port_init(void)//инициализация портов ввода/вывода
{
DDRA&=~(1<<PA0);//бит 0 порта А на вход для датчика
 386:	d0 98       	cbi	0x1a, 0	; 26
DDRA|=(1<<PA1)|(1<<PA2)|(1<<PA3)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7);//биты с 1-7 на выход для LCD дисплея
 388:	8a b3       	in	r24, 0x1a	; 26
 38a:	8e 6f       	ori	r24, 0xFE	; 254
 38c:	8a bb       	out	0x1a, r24	; 26

PORTA|=(1<<PA0);//устанавливаем высокий уровень
 38e:	d8 9a       	sbi	0x1b, 0	; 27
PORTA&=~((1<<PA1)|(1<<PA2)|(1<<PA3)|(1<<PA4)|(1<<PA5)|(1<<PA6)|(1<<PA7));//устанавливаем низкий уровень
 390:	8b b3       	in	r24, 0x1b	; 27
 392:	81 70       	andi	r24, 0x01	; 1
 394:	8b bb       	out	0x1b, r24	; 27



DDRC|=(1<<PC7)|(1<<PC6)|(1<<PC5)|(1<<PC4)|(1<<PC3);//бит с 3-7 порта С на выход для индикации работы нагрузок
 396:	84 b3       	in	r24, 0x14	; 20
 398:	88 6f       	ori	r24, 0xF8	; 248
 39a:	84 bb       	out	0x14, r24	; 20
PORTC&=~((1<<PC7)|(1<<PC6)|(1<<PC5)|(1<<PC4)|(1<<PC3));//устанавливает низкий лог. уровень с 3 по 7 бит порта С
 39c:	85 b3       	in	r24, 0x15	; 21
 39e:	87 70       	andi	r24, 0x07	; 7
 3a0:	85 bb       	out	0x15, r24	; 21


DDRB&=~(1<<PB4);//порт В бит 4 на вход
 3a2:	bc 98       	cbi	0x17, 4	; 23
PORTB|=(1<<PB4);//высокий уровень
 3a4:	c4 9a       	sbi	0x18, 4	; 24
DDRB&=~(1<<PB3);//порт В бит 3 на вход
 3a6:	bb 98       	cbi	0x17, 3	; 23
PORTB|=(1<<PB3);//высокий уровень
 3a8:	c3 9a       	sbi	0x18, 3	; 24
DDRB&=~(1<<PB2);//порт В бит 2 на вход
 3aa:	ba 98       	cbi	0x17, 2	; 23
PORTB|=(1<<PB2);//высокий уровень
 3ac:	c2 9a       	sbi	0x18, 2	; 24
DDRB&=~(1<<PB1);//порт В бит 1 на вход
 3ae:	b9 98       	cbi	0x17, 1	; 23
PORTB|=(1<<PB1);//высокий уровень
 3b0:	c1 9a       	sbi	0x18, 1	; 24
DDRB&=~(1<<PB0);//порт В бит 0 на вход
 3b2:	b8 98       	cbi	0x17, 0	; 23
PORTB|=(1<<PB0);//высокий уровень
 3b4:	c0 9a       	sbi	0x18, 0	; 24

DDRD|=(1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5);//порт Д бит с 2-5 на выход
 3b6:	81 b3       	in	r24, 0x11	; 17
 3b8:	8c 63       	ori	r24, 0x3C	; 60
 3ba:	81 bb       	out	0x11, r24	; 17
PORTD&=~((1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5));//низкий уровень
 3bc:	82 b3       	in	r24, 0x12	; 18
 3be:	83 7c       	andi	r24, 0xC3	; 195
 3c0:	82 bb       	out	0x12, r24	; 18
 3c2:	08 95       	ret

000003c4 <Auto_Mode_On_Nag>:

void Auto_Mode_On_Nag(unsigned char flag_delay)//функция обработки сигнала с PIR-датчика
{


if (flag_delay==1)//если датчик сработал включаем первую нагрузку
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	19 f4       	brne	.+6      	; 0x3ce <Auto_Mode_On_Nag+0xa>
{
	PORTD|=(1<<PD2);
 3c8:	92 9a       	sbi	0x12, 2	; 18
PORTC|=(1<<PC6);
 3ca:	ae 9a       	sbi	0x15, 6	; 21
 3cc:	08 95       	ret
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	89 e6       	ldi	r24, 0x69	; 105
 3d2:	98 e1       	ldi	r25, 0x18	; 24
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <Auto_Mode_On_Nag+0x10>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <Auto_Mode_On_Nag+0x1a>
 3de:	00 00       	nop

}
else{//выключение нагрузки с задержкой в 1с.

_delay_ms(1000);
PORTD&=~(1<<PD2);
 3e0:	92 98       	cbi	0x12, 2	; 18
PORTC&=~(1<<PC6);
 3e2:	ae 98       	cbi	0x15, 6	; 21
 3e4:	08 95       	ret

000003e6 <Nagruzka>:
}

}

void Nagruzka(unsigned char flag1,unsigned char flag2,unsigned char flag3,unsigned char flag4, unsigned char count1,unsigned char count2,unsigned char count3,unsigned char count4)//функция управления нагрузками в ручном режиме
{
 3e6:	af 92       	push	r10
 3e8:	cf 92       	push	r12
 3ea:	ef 92       	push	r14
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	16 2f       	mov	r17, r22
 3f6:	d4 2f       	mov	r29, r20
 3f8:	c2 2f       	mov	r28, r18

if (flag1==1 && count1==1)//включение первой нагрузки
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	e9 f4       	brne	.+58     	; 0x438 <Nagruzka+0x52>
 3fe:	01 30       	cpi	r16, 0x01	; 1
 400:	69 f4       	brne	.+26     	; 0x41c <Nagruzka+0x36>
{

USART_Write("WOrk Nagruzka ON-1");
 402:	80 e6       	ldi	r24, 0x60	; 96
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
USART_putc(0x0d);
 40a:	8d e0       	ldi	r24, 0x0D	; 13
 40c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 410:	8a e0       	ldi	r24, 0x0A	; 10
 412:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
PORTD|=(1<<PD2);
 416:	92 9a       	sbi	0x12, 2	; 18
PORTC|=(1<<PC6);
 418:	ae 9a       	sbi	0x15, 6	; 21
 41a:	0e c0       	rjmp	.+28     	; 0x438 <Nagruzka+0x52>

}
else if (flag1==1 && count1==2)
 41c:	02 30       	cpi	r16, 0x02	; 2
 41e:	61 f4       	brne	.+24     	; 0x438 <Nagruzka+0x52>
{

USART_Write("WOrk Nagruzka OFF-1");//выключение первой нагрузки
 420:	83 e7       	ldi	r24, 0x73	; 115
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
USART_putc(0x0d);
 428:	8d e0       	ldi	r24, 0x0D	; 13
 42a:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
PORTD&=~(1<<PD2);
 434:	92 98       	cbi	0x12, 2	; 18
PORTC&=~(1<<PC6);
 436:	ae 98       	cbi	0x15, 6	; 21
}


if (flag2==2 && count2==1)
 438:	12 30       	cpi	r17, 0x02	; 2
 43a:	f9 f4       	brne	.+62     	; 0x47a <__stack+0x1b>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	e8 12       	cpse	r14, r24
 440:	0d c0       	rjmp	.+26     	; 0x45c <Nagruzka+0x76>
{

USART_Write("WOrk Nagruzka ON-2");//включение второй нагрузки
 442:	87 e8       	ldi	r24, 0x87	; 135
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
USART_putc(0x0d);
 44a:	8d e0       	ldi	r24, 0x0D	; 13
 44c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 450:	8a e0       	ldi	r24, 0x0A	; 10
 452:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
	PORTD|=(1<<PD3);
 456:	93 9a       	sbi	0x12, 3	; 18
	PORTC|=(1<<PC5);
 458:	ad 9a       	sbi	0x15, 5	; 21
 45a:	0f c0       	rjmp	.+30     	; 0x47a <__stack+0x1b>
}
else if (flag2==2 && count2==2)
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	e8 12       	cpse	r14, r24
 460:	0c c0       	rjmp	.+24     	; 0x47a <__stack+0x1b>
{

USART_Write("WOrk Nagruzka OFF-2");//выключение второй нагрузки
 462:	8a e9       	ldi	r24, 0x9A	; 154
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
USART_putc(0x0d);
 46a:	8d e0       	ldi	r24, 0x0D	; 13
 46c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 470:	8a e0       	ldi	r24, 0x0A	; 10
 472:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
	PORTD&=~(1<<PD3);
 476:	93 98       	cbi	0x12, 3	; 18
	PORTC&=~(1<<PC5);
 478:	ad 98       	cbi	0x15, 5	; 21
}


if (flag3==3 &&count3==1)
 47a:	d3 30       	cpi	r29, 0x03	; 3
 47c:	f9 f4       	brne	.+62     	; 0x4bc <__stack+0x5d>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	c8 12       	cpse	r12, r24
 482:	0d c0       	rjmp	.+26     	; 0x49e <__stack+0x3f>
{

USART_Write("WOrk Nagruzka ON-3");//включение 3-ей нагрузки
 484:	8e ea       	ldi	r24, 0xAE	; 174
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
USART_putc(0x0d);
 48c:	8d e0       	ldi	r24, 0x0D	; 13
 48e:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 492:	8a e0       	ldi	r24, 0x0A	; 10
 494:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
	PORTD|=(1<<PD4);
 498:	94 9a       	sbi	0x12, 4	; 18
	PORTC|=(1<<PC4);
 49a:	ac 9a       	sbi	0x15, 4	; 21
 49c:	0f c0       	rjmp	.+30     	; 0x4bc <__stack+0x5d>
}
else if (flag3==3 &&count3==2)
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	c8 12       	cpse	r12, r24
 4a2:	0c c0       	rjmp	.+24     	; 0x4bc <__stack+0x5d>
{

USART_Write("WOrk Nagruzka OFF-3");//выключение 3-ей нагрузки
 4a4:	81 ec       	ldi	r24, 0xC1	; 193
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
USART_putc(0x0d);
 4ac:	8d e0       	ldi	r24, 0x0D	; 13
 4ae:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 4b2:	8a e0       	ldi	r24, 0x0A	; 10
 4b4:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
	PORTD&=~(1<<PD4);
 4b8:	94 98       	cbi	0x12, 4	; 18
	PORTC&=~(1<<PC4);
 4ba:	ac 98       	cbi	0x15, 4	; 21
}

if (flag4==4 &&count4==1)
 4bc:	c4 30       	cpi	r28, 0x04	; 4
 4be:	f9 f4       	brne	.+62     	; 0x4fe <__stack+0x9f>
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	a8 12       	cpse	r10, r24
 4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <__stack+0x81>
{
USART_Write("WOrk Nagruzka ON-4");//включение 4-ой нагрузки
 4c6:	85 ed       	ldi	r24, 0xD5	; 213
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
	USART_putc(0x0d);
 4ce:	8d e0       	ldi	r24, 0x0D	; 13
 4d0:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
	USART_putc(0x0a);
 4d4:	8a e0       	ldi	r24, 0x0A	; 10
 4d6:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
	PORTD|=(1<<PD5);
 4da:	95 9a       	sbi	0x12, 5	; 18
	PORTC|=(1<<PC3);
 4dc:	ab 9a       	sbi	0x15, 3	; 21
 4de:	0f c0       	rjmp	.+30     	; 0x4fe <__stack+0x9f>
}
else if (flag4==4 &&count4==2)
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	a8 12       	cpse	r10, r24
 4e4:	0c c0       	rjmp	.+24     	; 0x4fe <__stack+0x9f>
{
USART_Write("WOrk Nagruzka OFF-4");//выключение 4-ой нагрузки
 4e6:	88 ee       	ldi	r24, 0xE8	; 232
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
USART_putc(0x0d);
 4ee:	8d e0       	ldi	r24, 0x0D	; 13
 4f0:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 4f4:	8a e0       	ldi	r24, 0x0A	; 10
 4f6:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
	PORTD&=~(1<<PD5);
 4fa:	95 98       	cbi	0x12, 5	; 18
	PORTC&=~(1<<PC3);
 4fc:	ab 98       	cbi	0x15, 3	; 21
}




}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ef 90       	pop	r14
 508:	cf 90       	pop	r12
 50a:	af 90       	pop	r10
 50c:	08 95       	ret

0000050e <Main_Led_indicate>:

void Main_Led_indicate(unsigned char flag_Main_led)//индикация режима работы системы
{

switch(flag_Main_led)
 50e:	83 30       	cpi	r24, 0x03	; 3
 510:	81 f1       	breq	.+96     	; 0x572 <Main_Led_indicate+0x64>
 512:	28 f4       	brcc	.+10     	; 0x51e <Main_Led_indicate+0x10>
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	49 f0       	breq	.+18     	; 0x52a <Main_Led_indicate+0x1c>
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	c9 f0       	breq	.+50     	; 0x54e <Main_Led_indicate+0x40>
 51c:	08 95       	ret
 51e:	84 30       	cpi	r24, 0x04	; 4
 520:	d9 f1       	breq	.+118    	; 0x598 <Main_Led_indicate+0x8a>
 522:	85 30       	cpi	r24, 0x05	; 5
 524:	09 f4       	brne	.+2      	; 0x528 <Main_Led_indicate+0x1a>
 526:	4a c0       	rjmp	.+148    	; 0x5bc <Main_Led_indicate+0xae>
 528:	08 95       	ret
{

case 1:{		

LCDGotoXY(2,0);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("Adjust Settings");
 532:	8c ef       	ldi	r24, 0xFC	; 252
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 53a:	2f ef       	ldi	r18, 0xFF	; 255
 53c:	80 e7       	ldi	r24, 0x70	; 112
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <Main_Led_indicate+0x32>
 548:	00 c0       	rjmp	.+0      	; 0x54a <Main_Led_indicate+0x3c>
 54a:	00 00       	nop
 54c:	08 95       	ret

break;}


case 2:{
LCDGotoXY(2,0);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("Auto-PIR Sensor");
 556:	8c e0       	ldi	r24, 0x0C	; 12
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 55e:	2f ef       	ldi	r18, 0xFF	; 255
 560:	80 e7       	ldi	r24, 0x70	; 112
 562:	92 e0       	ldi	r25, 0x02	; 2
 564:	21 50       	subi	r18, 0x01	; 1
 566:	80 40       	sbci	r24, 0x00	; 0
 568:	90 40       	sbci	r25, 0x00	; 0
 56a:	e1 f7       	brne	.-8      	; 0x564 <Main_Led_indicate+0x56>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <Main_Led_indicate+0x60>
 56e:	00 00       	nop
 570:	08 95       	ret
_delay_ms(100);
	break;}


case 3:{
LCDGotoXY(4,0);
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	84 e0       	ldi	r24, 0x04	; 4
 576:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("Sleep Mode!!!");
 57a:	8c e1       	ldi	r24, 0x1C	; 28
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 582:	2f ef       	ldi	r18, 0xFF	; 255
 584:	80 e7       	ldi	r24, 0x70	; 112
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <Main_Led_indicate+0x7a>
 590:	00 c0       	rjmp	.+0      	; 0x592 <Main_Led_indicate+0x84>
 592:	00 00       	nop
_delay_ms(100);
PORTC|=(1<<PC7);
 594:	af 9a       	sbi	0x15, 7	; 21
	break;}
 596:	08 95       	ret


case 4:{	
LCDGotoXY(4,0);
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	84 e0       	ldi	r24, 0x04	; 4
 59c:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("OFF System");
 5a0:	8a e2       	ldi	r24, 0x2A	; 42
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	83 ec       	ldi	r24, 0xC3	; 195
 5ac:	99 e0       	ldi	r25, 0x09	; 9
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <Main_Led_indicate+0xa0>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <Main_Led_indicate+0xaa>
 5b8:	00 00       	nop
 5ba:	08 95       	ret
_delay_ms(400);break;PORTC&=~(1<<PC7);}

case 5:{
LCDGotoXY(5,0);	
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	85 e0       	ldi	r24, 0x05	; 5
 5c0:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("Control PC");
 5c4:	85 e3       	ldi	r24, 0x35	; 53
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
PORTC|=(1<<PC7);
 5cc:	af 9a       	sbi	0x15, 7	; 21
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	83 ec       	ldi	r24, 0xC3	; 195
 5d2:	99 e0       	ldi	r25, 0x09	; 9
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <Main_Led_indicate+0xc6>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <Main_Led_indicate+0xd0>
 5de:	00 00       	nop
 5e0:	08 95       	ret

000005e2 <Clocck_RTC_ds1307>:

}


void Clocck_RTC_ds1307(void)//функция реализующая подсчет времени на микросхема ds1307
{
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
SendByte_Addr(0,0b11010000);
 5ea:	60 ed       	ldi	r22, 0xD0	; 208
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 b3 00 	call	0x166	; 0x166 <SendByte_Addr>
 5f2:	2f ef       	ldi	r18, 0xFF	; 255
 5f4:	82 e5       	ldi	r24, 0x52	; 82
 5f6:	97 e0       	ldi	r25, 0x07	; 7
 5f8:	21 50       	subi	r18, 0x01	; 1
 5fa:	80 40       	sbci	r24, 0x00	; 0
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <Clocck_RTC_ds1307+0x16>
 600:	00 c0       	rjmp	.+0      	; 0x602 <Clocck_RTC_ds1307+0x20>
 602:	00 00       	nop
_delay_ms(300);
Start_I2C();
 604:	0e 94 a3 00 	call	0x146	; 0x146 <Start_I2C>

Sendbyte_I2C(0b11010001);
 608:	81 ed       	ldi	r24, 0xD1	; 209
 60a:	0e 94 ac 00 	call	0x158	; 0x158 <Sendbyte_I2C>
second=Readbyte_I2C();
 60e:	0e 94 c4 00 	call	0x188	; 0x188 <Readbyte_I2C>
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	90 93 08 02 	sts	0x0208, r25
 618:	80 93 07 02 	sts	0x0207, r24
minuts=Readbyte_I2C();
 61c:	0e 94 c4 00 	call	0x188	; 0x188 <Readbyte_I2C>
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	90 93 06 02 	sts	0x0206, r25
 626:	80 93 05 02 	sts	0x0205, r24
house=Readbyte_I2C();
 62a:	0e 94 c4 00 	call	0x188	; 0x188 <Readbyte_I2C>
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	90 93 04 02 	sts	0x0204, r25
 634:	80 93 03 02 	sts	0x0203, r24
day=Readbyte_I2C();
 638:	0e 94 c4 00 	call	0x188	; 0x188 <Readbyte_I2C>
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	90 93 02 02 	sts	0x0202, r25
 642:	80 93 01 02 	sts	0x0201, r24
data_d=Readbyte_I2C();
 646:	0e 94 c4 00 	call	0x188	; 0x188 <Readbyte_I2C>
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 00 02 	sts	0x0200, r25
 650:	80 93 ff 01 	sts	0x01FF, r24
month=Readbyte_I2C();
 654:	0e 94 c4 00 	call	0x188	; 0x188 <Readbyte_I2C>
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	90 93 fe 01 	sts	0x01FE, r25
 65e:	80 93 fd 01 	sts	0x01FD, r24
year=Readbyte_I2C();
 662:	0e 94 c4 00 	call	0x188	; 0x188 <Readbyte_I2C>
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	90 93 fc 01 	sts	0x01FC, r25
 66c:	80 93 fb 01 	sts	0x01FB, r24
Stop_I2C();
 670:	0e 94 a9 00 	call	0x152	; 0x152 <Stop_I2C>
second=RTC_ConvertDEC(second);
 674:	80 91 07 02 	lds	r24, 0x0207
 678:	0e 94 c8 06 	call	0xd90	; 0xd90 <RTC_ConvertDEC>
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	90 93 08 02 	sts	0x0208, r25
 682:	80 93 07 02 	sts	0x0207, r24
minuts=RTC_ConvertDEC(minuts);
 686:	80 91 05 02 	lds	r24, 0x0205
 68a:	0e 94 c8 06 	call	0xd90	; 0xd90 <RTC_ConvertDEC>
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	90 93 06 02 	sts	0x0206, r25
 694:	80 93 05 02 	sts	0x0205, r24
house=RTC_ConvertDEC(house);
 698:	80 91 03 02 	lds	r24, 0x0203
 69c:	0e 94 c8 06 	call	0xd90	; 0xd90 <RTC_ConvertDEC>
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	90 93 04 02 	sts	0x0204, r25
 6a6:	80 93 03 02 	sts	0x0203, r24
day=RTC_ConvertDEC(day);
 6aa:	01 e0       	ldi	r16, 0x01	; 1
 6ac:	12 e0       	ldi	r17, 0x02	; 2
 6ae:	f8 01       	movw	r30, r16
 6b0:	80 81       	ld	r24, Z
 6b2:	0e 94 c8 06 	call	0xd90	; 0xd90 <RTC_ConvertDEC>
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	90 93 02 02 	sts	0x0202, r25
 6bc:	80 93 01 02 	sts	0x0201, r24
data_d=RTC_ConvertDEC(data_d);
 6c0:	80 91 ff 01 	lds	r24, 0x01FF
 6c4:	0e 94 c8 06 	call	0xd90	; 0xd90 <RTC_ConvertDEC>
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	90 93 00 02 	sts	0x0200, r25
 6ce:	80 93 ff 01 	sts	0x01FF, r24
month=RTC_ConvertDEC(month);
 6d2:	80 91 fd 01 	lds	r24, 0x01FD
 6d6:	0e 94 c8 06 	call	0xd90	; 0xd90 <RTC_ConvertDEC>
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	90 93 fe 01 	sts	0x01FE, r25
 6e0:	80 93 fd 01 	sts	0x01FD, r24
year=RTC_ConvertDEC(year);
 6e4:	80 91 fb 01 	lds	r24, 0x01FB
 6e8:	0e 94 c8 06 	call	0xd90	; 0xd90 <RTC_ConvertDEC>
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	90 93 fc 01 	sts	0x01FC, r25
 6f2:	80 93 fb 01 	sts	0x01FB, r24
//+++++++++++++++++++++++++++++++++++++++++++++++++++++
//=====================================================


USART_putc(0x0d);
 6f6:	8d e0       	ldi	r24, 0x0D	; 13
 6f8:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 6fc:	8a e0       	ldi	r24, 0x0A	; 10
 6fe:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(data_d/10+0x30);//преобразуем число в код числа
 702:	80 91 ff 01 	lds	r24, 0x01FF
 706:	90 91 00 02 	lds	r25, 0x0200
 70a:	ca e0       	ldi	r28, 0x0A	; 10
 70c:	d0 e0       	ldi	r29, 0x00	; 0
 70e:	be 01       	movw	r22, r28
 710:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 714:	80 e3       	ldi	r24, 0x30	; 48
 716:	86 0f       	add	r24, r22
 718:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(data_d%10+0x30);//преобразуем число в код числа
 71c:	80 91 ff 01 	lds	r24, 0x01FF
 720:	90 91 00 02 	lds	r25, 0x0200
 724:	be 01       	movw	r22, r28
 726:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 72a:	80 5d       	subi	r24, 0xD0	; 208
 72c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 730:	8e e2       	ldi	r24, 0x2E	; 46
 732:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(month/10+0x30);//преобразуем число в код числа
 736:	80 91 fd 01 	lds	r24, 0x01FD
 73a:	90 91 fe 01 	lds	r25, 0x01FE
 73e:	be 01       	movw	r22, r28
 740:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 744:	80 e3       	ldi	r24, 0x30	; 48
 746:	86 0f       	add	r24, r22
 748:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(month%10+0x30);//преобразуем число в код числа
 74c:	80 91 fd 01 	lds	r24, 0x01FD
 750:	90 91 fe 01 	lds	r25, 0x01FE
 754:	be 01       	movw	r22, r28
 756:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 75a:	80 5d       	subi	r24, 0xD0	; 208
 75c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 760:	8e e2       	ldi	r24, 0x2E	; 46
 762:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(year/10+0x30);//преобразуем число в код числа
 766:	80 91 fb 01 	lds	r24, 0x01FB
 76a:	90 91 fc 01 	lds	r25, 0x01FC
 76e:	be 01       	movw	r22, r28
 770:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 774:	80 e3       	ldi	r24, 0x30	; 48
 776:	86 0f       	add	r24, r22
 778:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(year%10+0x30);//преобразуем число в код числа
 77c:	80 91 fb 01 	lds	r24, 0x01FB
 780:	90 91 fc 01 	lds	r25, 0x01FC
 784:	be 01       	movw	r22, r28
 786:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 78a:	80 5d       	subi	r24, 0xD0	; 208
 78c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 790:	8e e2       	ldi	r24, 0x2E	; 46
 792:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 796:	8e e2       	ldi	r24, 0x2E	; 46
 798:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 79c:	8e e2       	ldi	r24, 0x2E	; 46
 79e:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 7a2:	8e e2       	ldi	r24, 0x2E	; 46
 7a4:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 7a8:	8e e2       	ldi	r24, 0x2E	; 46
 7aa:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(day+0x30);
 7ae:	f8 01       	movw	r30, r16
 7b0:	80 81       	ld	r24, Z
 7b2:	80 5d       	subi	r24, 0xD0	; 208
 7b4:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 7b8:	8e e2       	ldi	r24, 0x2E	; 46
 7ba:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 7be:	8e e2       	ldi	r24, 0x2E	; 46
 7c0:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc('.');
 7c4:	8e e2       	ldi	r24, 0x2E	; 46
 7c6:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(house/10+0x30);//преобразуем число в код числа
 7ca:	80 91 03 02 	lds	r24, 0x0203
 7ce:	90 91 04 02 	lds	r25, 0x0204
 7d2:	be 01       	movw	r22, r28
 7d4:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 7d8:	80 e3       	ldi	r24, 0x30	; 48
 7da:	86 0f       	add	r24, r22
 7dc:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(house%10+0x30);
 7e0:	80 91 03 02 	lds	r24, 0x0203
 7e4:	90 91 04 02 	lds	r25, 0x0204
 7e8:	be 01       	movw	r22, r28
 7ea:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 7ee:	80 5d       	subi	r24, 0xD0	; 208
 7f0:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(':');
 7f4:	8a e3       	ldi	r24, 0x3A	; 58
 7f6:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(minuts/10+0x30);//преобразуем число в код числа
 7fa:	80 91 05 02 	lds	r24, 0x0205
 7fe:	90 91 06 02 	lds	r25, 0x0206
 802:	be 01       	movw	r22, r28
 804:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 808:	80 e3       	ldi	r24, 0x30	; 48
 80a:	86 0f       	add	r24, r22
 80c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(minuts%10+0x30);
 810:	80 91 05 02 	lds	r24, 0x0205
 814:	90 91 06 02 	lds	r25, 0x0206
 818:	be 01       	movw	r22, r28
 81a:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 81e:	80 5d       	subi	r24, 0xD0	; 208
 820:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(':');
 824:	8a e3       	ldi	r24, 0x3A	; 58
 826:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(second/10+0x30);//преобразуем число в код числа
 82a:	80 91 07 02 	lds	r24, 0x0207
 82e:	90 91 08 02 	lds	r25, 0x0208
 832:	be 01       	movw	r22, r28
 834:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 838:	80 e3       	ldi	r24, 0x30	; 48
 83a:	86 0f       	add	r24, r22
 83c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(second%10+0x30);
 840:	80 91 07 02 	lds	r24, 0x0207
 844:	90 91 08 02 	lds	r25, 0x0208
 848:	be 01       	movw	r22, r28
 84a:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 84e:	80 5d       	subi	r24, 0xD0	; 208
 850:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0d);
 854:	8d e0       	ldi	r24, 0x0D	; 13
 856:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
USART_putc(0x0a);
 85a:	8a e0       	ldi	r24, 0x0A	; 10
 85c:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>


}
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	1f 91       	pop	r17
 866:	0f 91       	pop	r16
 868:	08 95       	ret

0000086a <USART_Control>:

void USART_Control(unsigned char flag)//функция реализующая управление через USART-интерфейс
{

switch(flag)
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	fc 01       	movw	r30, r24
 86e:	e1 54       	subi	r30, 0x41	; 65
 870:	f1 09       	sbc	r31, r1
 872:	e7 33       	cpi	r30, 0x37	; 55
 874:	f1 05       	cpc	r31, r1
 876:	08 f0       	brcs	.+2      	; 0x87a <USART_Control+0x10>
 878:	7a c0       	rjmp	.+244    	; 0x96e <USART_Control+0x104>
 87a:	e6 5d       	subi	r30, 0xD6	; 214
 87c:	ff 4f       	sbci	r31, 0xFF	; 255
 87e:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__tablejump2__>
{
//включаем первую нагрузку
case 'Q':{LCDGotoXY(5,3);
 882:	63 e0       	ldi	r22, 0x03	; 3
 884:	85 e0       	ldi	r24, 0x05	; 5
 886:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("On-1 load");PORTD|=(1<<PD2);PORTC|=(1<<PC6);   break;}
 88a:	80 e4       	ldi	r24, 0x40	; 64
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 892:	92 9a       	sbi	0x12, 2	; 18
 894:	ae 9a       	sbi	0x15, 6	; 21
 896:	08 95       	ret
case 'q':{ LCDGotoXY(5,3);
 898:	63 e0       	ldi	r22, 0x03	; 3
 89a:	85 e0       	ldi	r24, 0x05	; 5
 89c:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("OFF-1 load");PORTD&=~(1<<PD2);PORTC&=~(1<<PC6);  break;}//выключаем первую нагрузку
 8a0:	8a e4       	ldi	r24, 0x4A	; 74
 8a2:	91 e0       	ldi	r25, 0x01	; 1
 8a4:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 8a8:	92 98       	cbi	0x12, 2	; 18
 8aa:	ae 98       	cbi	0x15, 6	; 21
 8ac:	08 95       	ret

case 'W':{ LCDGotoXY(5,3);
 8ae:	63 e0       	ldi	r22, 0x03	; 3
 8b0:	85 e0       	ldi	r24, 0x05	; 5
 8b2:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("On-2 load");PORTD|=(1<<PD3);PORTC|=(1<<PC5);  break;}//включаем 2-ую нагрузку
 8b6:	85 e5       	ldi	r24, 0x55	; 85
 8b8:	91 e0       	ldi	r25, 0x01	; 1
 8ba:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 8be:	93 9a       	sbi	0x12, 3	; 18
 8c0:	ad 9a       	sbi	0x15, 5	; 21
 8c2:	08 95       	ret
case 'w':{ LCDGotoXY(5,3);
 8c4:	63 e0       	ldi	r22, 0x03	; 3
 8c6:	85 e0       	ldi	r24, 0x05	; 5
 8c8:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("OFF-2 load");PORTD&=~(1<<PD3);PORTC&=~(1<<PC5);  break;}//выключаем 2-ую нагрузку
 8cc:	8f e5       	ldi	r24, 0x5F	; 95
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 8d4:	93 98       	cbi	0x12, 3	; 18
 8d6:	ad 98       	cbi	0x15, 5	; 21
 8d8:	08 95       	ret

case 'E':{ LCDGotoXY(5,3);
 8da:	63 e0       	ldi	r22, 0x03	; 3
 8dc:	85 e0       	ldi	r24, 0x05	; 5
 8de:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("On-3 load");PORTD|=(1<<PD4);PORTC|=(1<<PC4);  break;}//включаем 3-ю нагрузку
 8e2:	8a e6       	ldi	r24, 0x6A	; 106
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 8ea:	94 9a       	sbi	0x12, 4	; 18
 8ec:	ac 9a       	sbi	0x15, 4	; 21
 8ee:	08 95       	ret
case 'e':{ LCDGotoXY(5,3);
 8f0:	63 e0       	ldi	r22, 0x03	; 3
 8f2:	85 e0       	ldi	r24, 0x05	; 5
 8f4:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("OFF-3 load");PORTD&=~(1<<PD4);PORTC&=~(1<<PC4);  break;}//выключаем 3-ю нагрузку
 8f8:	84 e7       	ldi	r24, 0x74	; 116
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 900:	94 98       	cbi	0x12, 4	; 18
 902:	ac 98       	cbi	0x15, 4	; 21
 904:	08 95       	ret

case 'R':{LCDGotoXY(5,3);
 906:	63 e0       	ldi	r22, 0x03	; 3
 908:	85 e0       	ldi	r24, 0x05	; 5
 90a:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("On-4 load");PORTD|=(1<<PD5); PORTC|=(1<<PC3);  break;}//включаем 4-ю нагрузку
 90e:	8f e7       	ldi	r24, 0x7F	; 127
 910:	91 e0       	ldi	r25, 0x01	; 1
 912:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 916:	95 9a       	sbi	0x12, 5	; 18
 918:	ab 9a       	sbi	0x15, 3	; 21
 91a:	08 95       	ret
case 'r':{ LCDGotoXY(5,3);
 91c:	63 e0       	ldi	r22, 0x03	; 3
 91e:	85 e0       	ldi	r24, 0x05	; 5
 920:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("OFF-4 load");PORTD&=~(1<<PD5);PORTC&=~(1<<PC3);  break;}//выключаем 4-ю нагрузку
 924:	89 e8       	ldi	r24, 0x89	; 137
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 92c:	95 98       	cbi	0x12, 5	; 18
 92e:	ab 98       	cbi	0x15, 3	; 21
 930:	08 95       	ret

case 'A':{ LCDGotoXY(5,3);
 932:	63 e0       	ldi	r22, 0x03	; 3
 934:	85 e0       	ldi	r24, 0x05	; 5
 936:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("On-ALL load");PORTD|=(1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5); 
 93a:	84 e9       	ldi	r24, 0x94	; 148
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 942:	82 b3       	in	r24, 0x12	; 18
 944:	8c 63       	ori	r24, 0x3C	; 60
 946:	82 bb       	out	0x12, r24	; 18
	PORTC|=(1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6);
 948:	85 b3       	in	r24, 0x15	; 21
 94a:	88 67       	ori	r24, 0x78	; 120
 94c:	85 bb       	out	0x15, r24	; 21
	 break;}//все нагрузки включены
 94e:	08 95       	ret
case 'a':{LCDGotoXY(5,3);
 950:	63 e0       	ldi	r22, 0x03	; 3
 952:	85 e0       	ldi	r24, 0x05	; 5
 954:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("OFF-ALL load");PORTD&=~((1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5));
 958:	80 ea       	ldi	r24, 0xA0	; 160
 95a:	91 e0       	ldi	r25, 0x01	; 1
 95c:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 960:	82 b3       	in	r24, 0x12	; 18
 962:	83 7c       	andi	r24, 0xC3	; 195
 964:	82 bb       	out	0x12, r24	; 18
	PORTC&=~((1<<PC3)|(1<<PC4)|(1<<PC5)|(1<<PC6));
 966:	85 b3       	in	r24, 0x15	; 21
 968:	87 78       	andi	r24, 0x87	; 135
 96a:	85 bb       	out	0x15, r24	; 21
	   break;}//все выключены
 96c:	08 95       	ret

	default:LCDGotoXY(5,3);
 96e:	63 e0       	ldi	r22, 0x03	; 3
 970:	85 e0       	ldi	r24, 0x05	; 5
 972:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCDsendString("Wait INPUT!!");
 976:	8d ea       	ldi	r24, 0xAD	; 173
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
 97e:	08 95       	ret

00000980 <main>:

}

int main(void)
{
	Port_init();
 980:	0e 94 c3 01 	call	0x386	; 0x386 <Port_init>


   USART_INIT(9600);
 984:	80 e8       	ldi	r24, 0x80	; 128
 986:	95 e2       	ldi	r25, 0x25	; 37
 988:	0e 94 d3 06 	call	0xda6	; 0xda6 <USART_INIT>
   LCDinit();
 98c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCDinit>
   USART_Write("Work Baud=9600!!");
 990:	8a eb       	ldi	r24, 0xBA	; 186
 992:	91 e0       	ldi	r25, 0x01	; 1
 994:	0e 94 04 07 	call	0xe08	; 0xe08 <USART_Write>
   USART_putc(0x0d);
 998:	8d e0       	ldi	r24, 0x0D	; 13
 99a:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
   USART_putc(0x0a);
 99e:	8a e0       	ldi	r24, 0x0A	; 10
 9a0:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
   sei();
 9a4:	78 94       	sei
   Init_I2C();
 9a6:	0e 94 a0 00 	call	0x140	; 0x140 <Init_I2C>
   Clocck_RTC_ds1307();
 9aa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Clocck_RTC_ds1307>
  
   PORTC|=(1<<PC7);
 9ae:	af 9a       	sbi	0x15, 7	; 21
flag_del=0;
		if (!(PINB&(1<<PB0)))
		{
		_delay_ms(200);

		flag_adjust_work1=1;
 9b0:	d1 e0       	ldi	r29, 0x01	; 1

		if (!(PINB&(1<<PB3)))
		{
			_delay_ms(200);

			flag_adjust_work4=4;
 9b2:	68 94       	set
 9b4:	ff 24       	eor	r15, r15
 9b6:	f2 f8       	bld	r15, 2

		if (!(PINB&(1<<PB2)))
		{
			_delay_ms(200);

			flag_adjust_work3=3;
 9b8:	13 e0       	ldi	r17, 0x03	; 3
flag_del=0;
		if (!(PINB&(1<<PB0)))
		{
		_delay_ms(200);

		flag_adjust_work1=1;
 9ba:	cd 2f       	mov	r28, r29
   PORTC|=(1<<PC7);
   
    while (1) 
    {
	
	LCDGotoXY(8,2);
 9bc:	62 e0       	ldi	r22, 0x02	; 2
 9be:	88 e0       	ldi	r24, 0x08	; 8
 9c0:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCD_write_int(house);
 9c4:	80 91 03 02 	lds	r24, 0x0203
 9c8:	90 91 04 02 	lds	r25, 0x0204
 9cc:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
	LCDdata(':');
 9d0:	8a e3       	ldi	r24, 0x3A	; 58
 9d2:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
	LCD_write_int(minuts);
 9d6:	80 91 05 02 	lds	r24, 0x0205
 9da:	90 91 06 02 	lds	r25, 0x0206
 9de:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
	LCDdata(':');
 9e2:	8a e3       	ldi	r24, 0x3A	; 58
 9e4:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
	LCD_write_int(second);
 9e8:	80 91 07 02 	lds	r24, 0x0207
 9ec:	90 91 08 02 	lds	r25, 0x0208
 9f0:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>

	if (!(PINB&(1<<PB4)))
 9f4:	b4 99       	sbic	0x16, 4	; 22
 9f6:	26 c0       	rjmp	.+76     	; 0xa44 <main+0xc4>
 9f8:	2f ef       	ldi	r18, 0xFF	; 255
 9fa:	81 ee       	ldi	r24, 0xE1	; 225
 9fc:	94 e0       	ldi	r25, 0x04	; 4
 9fe:	21 50       	subi	r18, 0x01	; 1
 a00:	80 40       	sbci	r24, 0x00	; 0
 a02:	90 40       	sbci	r25, 0x00	; 0
 a04:	e1 f7       	brne	.-8      	; 0x9fe <main+0x7e>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <main+0x88>
 a08:	00 00       	nop
	{

	_delay_ms(200);
	//сброс флагов управления при переключении режима работы
	 count_adjust_work1=0;
 a0a:	10 92 f9 01 	sts	0x01F9, r1
	 count_adjust_work2=0;
 a0e:	10 92 f8 01 	sts	0x01F8, r1
	 count_adjust_work3=0;
 a12:	10 92 f7 01 	sts	0x01F7, r1
	count_adjust_work4=0;
 a16:	10 92 f6 01 	sts	0x01F6, r1

	 flag_adjust_work1=0;
 a1a:	10 92 f5 01 	sts	0x01F5, r1
	flag_adjust_work2=0;
 a1e:	10 92 f4 01 	sts	0x01F4, r1
	 flag_adjust_work3=0;
 a22:	10 92 f3 01 	sts	0x01F3, r1
	flag_adjust_work4=0;
 a26:	10 92 f2 01 	sts	0x01F2, r1
//сброс битов контроля нагрузок
	PORTD&=~(1<<PD2);
 a2a:	92 98       	cbi	0x12, 2	; 18
	PORTD&=~(1<<PD3);
 a2c:	93 98       	cbi	0x12, 3	; 18
	PORTD&=~(1<<PD4);
 a2e:	94 98       	cbi	0x12, 4	; 18
	PORTD&=~(1<<PD5);
 a30:	95 98       	cbi	0x12, 5	; 18
//сброс битов контроля индикации
	PORTC&=~(1<<PC6);
 a32:	ae 98       	cbi	0x15, 6	; 21
	PORTC&=~(1<<PC5);
 a34:	ad 98       	cbi	0x15, 5	; 21
	PORTC&=~(1<<PC4);
 a36:	ac 98       	cbi	0x15, 4	; 21
	PORTC&=~(1<<PC3);
 a38:	ab 98       	cbi	0x15, 3	; 21
	//счетчик режима работы системы
	count_main_led++;
 a3a:	80 91 fa 01 	lds	r24, 0x01FA
 a3e:	8f 5f       	subi	r24, 0xFF	; 255
 a40:	80 93 fa 01 	sts	0x01FA, r24

	}

	Main_Led_indicate(count_main_led);
 a44:	80 91 fa 01 	lds	r24, 0x01FA
 a48:	0e 94 87 02 	call	0x50e	; 0x50e <Main_Led_indicate>
 a4c:	2f ef       	ldi	r18, 0xFF	; 255
 a4e:	82 e5       	ldi	r24, 0x52	; 82
 a50:	97 e0       	ldi	r25, 0x07	; 7
 a52:	21 50       	subi	r18, 0x01	; 1
 a54:	80 40       	sbci	r24, 0x00	; 0
 a56:	90 40       	sbci	r25, 0x00	; 0
 a58:	e1 f7       	brne	.-8      	; 0xa52 <main+0xd2>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <main+0xdc>
 a5c:	00 00       	nop
	_delay_ms(300);
	LCDclear();
 a5e:	0e 94 93 01 	call	0x326	; 0x326 <LCDclear>
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
	if (count_main_led==1)//ручное управление нагрузками
 a62:	80 91 fa 01 	lds	r24, 0x01FA
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	09 f0       	breq	.+2      	; 0xa6c <main+0xec>
 a6a:	8d c0       	rjmp	.+282    	; 0xb86 <main+0x206>
	{
	LCDGotoXY(8,2);
 a6c:	62 e0       	ldi	r22, 0x02	; 2
 a6e:	88 e0       	ldi	r24, 0x08	; 8
 a70:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
	LCD_write_int(house);
 a74:	80 91 03 02 	lds	r24, 0x0203
 a78:	90 91 04 02 	lds	r25, 0x0204
 a7c:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
	LCDdata(':');
 a80:	8a e3       	ldi	r24, 0x3A	; 58
 a82:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
	LCD_write_int(minuts);
 a86:	80 91 05 02 	lds	r24, 0x0205
 a8a:	90 91 06 02 	lds	r25, 0x0206
 a8e:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
	LCDdata(':');
 a92:	8a e3       	ldi	r24, 0x3A	; 58
 a94:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
	LCD_write_int(second);
 a98:	80 91 07 02 	lds	r24, 0x0207
 a9c:	90 91 08 02 	lds	r25, 0x0208
 aa0:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
	

flag_del=0;
 aa4:	10 92 f1 01 	sts	0x01F1, r1
		if (!(PINB&(1<<PB0)))
 aa8:	b0 99       	sbic	0x16, 0	; 22
 aaa:	15 c0       	rjmp	.+42     	; 0xad6 <main+0x156>
 aac:	2f ef       	ldi	r18, 0xFF	; 255
 aae:	81 ee       	ldi	r24, 0xE1	; 225
 ab0:	94 e0       	ldi	r25, 0x04	; 4
 ab2:	21 50       	subi	r18, 0x01	; 1
 ab4:	80 40       	sbci	r24, 0x00	; 0
 ab6:	90 40       	sbci	r25, 0x00	; 0
 ab8:	e1 f7       	brne	.-8      	; 0xab2 <main+0x132>
 aba:	00 c0       	rjmp	.+0      	; 0xabc <main+0x13c>
 abc:	00 00       	nop
		{
		_delay_ms(200);

		flag_adjust_work1=1;
 abe:	c0 93 f5 01 	sts	0x01F5, r28
		count_adjust_work1+=1;
 ac2:	80 91 f9 01 	lds	r24, 0x01F9
 ac6:	8f 5f       	subi	r24, 0xFF	; 255
		if (count_adjust_work1>2)
 ac8:	83 30       	cpi	r24, 0x03	; 3
 aca:	18 f4       	brcc	.+6      	; 0xad2 <main+0x152>
		if (!(PINB&(1<<PB0)))
		{
		_delay_ms(200);

		flag_adjust_work1=1;
		count_adjust_work1+=1;
 acc:	80 93 f9 01 	sts	0x01F9, r24
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <main+0x156>
		if (count_adjust_work1>2)
		{
		count_adjust_work1=0;
 ad2:	10 92 f9 01 	sts	0x01F9, r1
		}

		}

		if (!(PINB&(1<<PB1)))
 ad6:	b1 99       	sbic	0x16, 1	; 22
 ad8:	16 c0       	rjmp	.+44     	; 0xb06 <main+0x186>
 ada:	2f ef       	ldi	r18, 0xFF	; 255
 adc:	81 ee       	ldi	r24, 0xE1	; 225
 ade:	94 e0       	ldi	r25, 0x04	; 4
 ae0:	21 50       	subi	r18, 0x01	; 1
 ae2:	80 40       	sbci	r24, 0x00	; 0
 ae4:	90 40       	sbci	r25, 0x00	; 0
 ae6:	e1 f7       	brne	.-8      	; 0xae0 <main+0x160>
 ae8:	00 c0       	rjmp	.+0      	; 0xaea <main+0x16a>
 aea:	00 00       	nop
		{
			_delay_ms(200);

			flag_adjust_work2=2;
 aec:	82 e0       	ldi	r24, 0x02	; 2
 aee:	80 93 f4 01 	sts	0x01F4, r24
			count_adjust_work2+=1;
 af2:	80 91 f8 01 	lds	r24, 0x01F8
 af6:	8f 5f       	subi	r24, 0xFF	; 255
			if (count_adjust_work2>2)
 af8:	83 30       	cpi	r24, 0x03	; 3
 afa:	18 f4       	brcc	.+6      	; 0xb02 <main+0x182>
		if (!(PINB&(1<<PB1)))
		{
			_delay_ms(200);

			flag_adjust_work2=2;
			count_adjust_work2+=1;
 afc:	80 93 f8 01 	sts	0x01F8, r24
 b00:	02 c0       	rjmp	.+4      	; 0xb06 <main+0x186>
			if (count_adjust_work2>2)
			{
				count_adjust_work2=0;
 b02:	10 92 f8 01 	sts	0x01F8, r1
			}

		}

		if (!(PINB&(1<<PB2)))
 b06:	b2 99       	sbic	0x16, 2	; 22
 b08:	15 c0       	rjmp	.+42     	; 0xb34 <main+0x1b4>
 b0a:	2f ef       	ldi	r18, 0xFF	; 255
 b0c:	81 ee       	ldi	r24, 0xE1	; 225
 b0e:	94 e0       	ldi	r25, 0x04	; 4
 b10:	21 50       	subi	r18, 0x01	; 1
 b12:	80 40       	sbci	r24, 0x00	; 0
 b14:	90 40       	sbci	r25, 0x00	; 0
 b16:	e1 f7       	brne	.-8      	; 0xb10 <main+0x190>
 b18:	00 c0       	rjmp	.+0      	; 0xb1a <main+0x19a>
 b1a:	00 00       	nop
		{
			_delay_ms(200);

			flag_adjust_work3=3;
 b1c:	10 93 f3 01 	sts	0x01F3, r17
			count_adjust_work3+=1;
 b20:	80 91 f7 01 	lds	r24, 0x01F7
 b24:	8f 5f       	subi	r24, 0xFF	; 255
			if (count_adjust_work3>2)
 b26:	83 30       	cpi	r24, 0x03	; 3
 b28:	18 f4       	brcc	.+6      	; 0xb30 <main+0x1b0>
		if (!(PINB&(1<<PB2)))
		{
			_delay_ms(200);

			flag_adjust_work3=3;
			count_adjust_work3+=1;
 b2a:	80 93 f7 01 	sts	0x01F7, r24
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <main+0x1b4>
			if (count_adjust_work3>2)
			{
				count_adjust_work3=0;
 b30:	10 92 f7 01 	sts	0x01F7, r1
			}

		}

		if (!(PINB&(1<<PB3)))
 b34:	b3 99       	sbic	0x16, 3	; 22
 b36:	15 c0       	rjmp	.+42     	; 0xb62 <main+0x1e2>
 b38:	2f ef       	ldi	r18, 0xFF	; 255
 b3a:	81 ee       	ldi	r24, 0xE1	; 225
 b3c:	94 e0       	ldi	r25, 0x04	; 4
 b3e:	21 50       	subi	r18, 0x01	; 1
 b40:	80 40       	sbci	r24, 0x00	; 0
 b42:	90 40       	sbci	r25, 0x00	; 0
 b44:	e1 f7       	brne	.-8      	; 0xb3e <main+0x1be>
 b46:	00 c0       	rjmp	.+0      	; 0xb48 <main+0x1c8>
 b48:	00 00       	nop
		{
			_delay_ms(200);

			flag_adjust_work4=4;
 b4a:	f0 92 f2 01 	sts	0x01F2, r15
			count_adjust_work4+=1;
 b4e:	80 91 f6 01 	lds	r24, 0x01F6
 b52:	8f 5f       	subi	r24, 0xFF	; 255
			if (count_adjust_work4>2)
 b54:	83 30       	cpi	r24, 0x03	; 3
 b56:	18 f4       	brcc	.+6      	; 0xb5e <main+0x1de>
		if (!(PINB&(1<<PB3)))
		{
			_delay_ms(200);

			flag_adjust_work4=4;
			count_adjust_work4+=1;
 b58:	80 93 f6 01 	sts	0x01F6, r24
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <main+0x1e2>
			if (count_adjust_work4>2)
			{
				count_adjust_work4=0;
 b5e:	10 92 f6 01 	sts	0x01F6, r1
			}

		}

		Nagruzka(flag_adjust_work1,flag_adjust_work2,flag_adjust_work3,flag_adjust_work4,count_adjust_work1,count_adjust_work2,count_adjust_work3,count_adjust_work4);
 b62:	a0 90 f6 01 	lds	r10, 0x01F6
 b66:	c0 90 f7 01 	lds	r12, 0x01F7
 b6a:	e0 90 f8 01 	lds	r14, 0x01F8
 b6e:	00 91 f9 01 	lds	r16, 0x01F9
 b72:	20 91 f2 01 	lds	r18, 0x01F2
 b76:	40 91 f3 01 	lds	r20, 0x01F3
 b7a:	60 91 f4 01 	lds	r22, 0x01F4
 b7e:	80 91 f5 01 	lds	r24, 0x01F5
 b82:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Nagruzka>


	}
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

if(count_main_led==2)//режим контроля за движением
 b86:	80 91 fa 01 	lds	r24, 0x01FA
 b8a:	82 30       	cpi	r24, 0x02	; 2
 b8c:	09 f0       	breq	.+2      	; 0xb90 <main+0x210>
 b8e:	92 c0       	rjmp	.+292    	; 0xcb4 <main+0x334>
{

LCDGotoXY(8,2);
 b90:	62 e0       	ldi	r22, 0x02	; 2
 b92:	88 e0       	ldi	r24, 0x08	; 8
 b94:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCD_write_int(house);
 b98:	80 91 03 02 	lds	r24, 0x0203
 b9c:	90 91 04 02 	lds	r25, 0x0204
 ba0:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
LCDdata(':');
 ba4:	8a e3       	ldi	r24, 0x3A	; 58
 ba6:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
LCD_write_int(minuts);
 baa:	80 91 05 02 	lds	r24, 0x0205
 bae:	90 91 06 02 	lds	r25, 0x0206
 bb2:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
LCDdata(':');
 bb6:	8a e3       	ldi	r24, 0x3A	; 58
 bb8:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
LCD_write_int(second);
 bbc:	80 91 07 02 	lds	r24, 0x0207
 bc0:	90 91 08 02 	lds	r25, 0x0208
 bc4:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>




if (!(PINB&(1<<PB1)))
 bc8:	b1 99       	sbic	0x16, 1	; 22
 bca:	16 c0       	rjmp	.+44     	; 0xbf8 <main+0x278>
 bcc:	2f ef       	ldi	r18, 0xFF	; 255
 bce:	81 ee       	ldi	r24, 0xE1	; 225
 bd0:	94 e0       	ldi	r25, 0x04	; 4
 bd2:	21 50       	subi	r18, 0x01	; 1
 bd4:	80 40       	sbci	r24, 0x00	; 0
 bd6:	90 40       	sbci	r25, 0x00	; 0
 bd8:	e1 f7       	brne	.-8      	; 0xbd2 <main+0x252>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <main+0x25c>
 bdc:	00 00       	nop
{
	_delay_ms(200);

	flag_adjust_work2=2;
 bde:	82 e0       	ldi	r24, 0x02	; 2
 be0:	80 93 f4 01 	sts	0x01F4, r24
	count_adjust_work2+=1;
 be4:	80 91 f8 01 	lds	r24, 0x01F8
 be8:	8f 5f       	subi	r24, 0xFF	; 255
	if (count_adjust_work2>2)
 bea:	83 30       	cpi	r24, 0x03	; 3
 bec:	18 f4       	brcc	.+6      	; 0xbf4 <main+0x274>
if (!(PINB&(1<<PB1)))
{
	_delay_ms(200);

	flag_adjust_work2=2;
	count_adjust_work2+=1;
 bee:	80 93 f8 01 	sts	0x01F8, r24
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <main+0x278>
	if (count_adjust_work2>2)
	{
		count_adjust_work2=0;
 bf4:	10 92 f8 01 	sts	0x01F8, r1
	}

}

if (!(PINB&(1<<PB2)))
 bf8:	b2 99       	sbic	0x16, 2	; 22
 bfa:	15 c0       	rjmp	.+42     	; 0xc26 <main+0x2a6>
 bfc:	2f ef       	ldi	r18, 0xFF	; 255
 bfe:	81 ee       	ldi	r24, 0xE1	; 225
 c00:	94 e0       	ldi	r25, 0x04	; 4
 c02:	21 50       	subi	r18, 0x01	; 1
 c04:	80 40       	sbci	r24, 0x00	; 0
 c06:	90 40       	sbci	r25, 0x00	; 0
 c08:	e1 f7       	brne	.-8      	; 0xc02 <main+0x282>
 c0a:	00 c0       	rjmp	.+0      	; 0xc0c <main+0x28c>
 c0c:	00 00       	nop
{
	_delay_ms(200);

	flag_adjust_work3=3;
 c0e:	10 93 f3 01 	sts	0x01F3, r17
	count_adjust_work3+=1;
 c12:	80 91 f7 01 	lds	r24, 0x01F7
 c16:	8f 5f       	subi	r24, 0xFF	; 255
	if (count_adjust_work3>2)
 c18:	83 30       	cpi	r24, 0x03	; 3
 c1a:	18 f4       	brcc	.+6      	; 0xc22 <main+0x2a2>
if (!(PINB&(1<<PB2)))
{
	_delay_ms(200);

	flag_adjust_work3=3;
	count_adjust_work3+=1;
 c1c:	80 93 f7 01 	sts	0x01F7, r24
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <main+0x2a6>
	if (count_adjust_work3>2)
	{
		count_adjust_work3=0;
 c22:	10 92 f7 01 	sts	0x01F7, r1
	}

}

if (!(PINB&(1<<PB3)))
 c26:	b3 99       	sbic	0x16, 3	; 22
 c28:	15 c0       	rjmp	.+42     	; 0xc54 <main+0x2d4>
 c2a:	2f ef       	ldi	r18, 0xFF	; 255
 c2c:	81 ee       	ldi	r24, 0xE1	; 225
 c2e:	94 e0       	ldi	r25, 0x04	; 4
 c30:	21 50       	subi	r18, 0x01	; 1
 c32:	80 40       	sbci	r24, 0x00	; 0
 c34:	90 40       	sbci	r25, 0x00	; 0
 c36:	e1 f7       	brne	.-8      	; 0xc30 <main+0x2b0>
 c38:	00 c0       	rjmp	.+0      	; 0xc3a <main+0x2ba>
 c3a:	00 00       	nop
{
	_delay_ms(200);

	flag_adjust_work4=4;
 c3c:	f0 92 f2 01 	sts	0x01F2, r15
	count_adjust_work4+=1;
 c40:	80 91 f6 01 	lds	r24, 0x01F6
 c44:	8f 5f       	subi	r24, 0xFF	; 255
	if (count_adjust_work4>2)
 c46:	83 30       	cpi	r24, 0x03	; 3
 c48:	18 f4       	brcc	.+6      	; 0xc50 <main+0x2d0>
if (!(PINB&(1<<PB3)))
{
	_delay_ms(200);

	flag_adjust_work4=4;
	count_adjust_work4+=1;
 c4a:	80 93 f6 01 	sts	0x01F6, r24
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <main+0x2d4>
	if (count_adjust_work4>2)
	{
		count_adjust_work4=0;
 c50:	10 92 f6 01 	sts	0x01F6, r1
	}

}

Nagruzka(flag_adjust_work1,flag_adjust_work2,flag_adjust_work3,flag_adjust_work4,count_adjust_work1,count_adjust_work2,count_adjust_work3,count_adjust_work4);
 c54:	a0 90 f6 01 	lds	r10, 0x01F6
 c58:	c0 90 f7 01 	lds	r12, 0x01F7
 c5c:	e0 90 f8 01 	lds	r14, 0x01F8
 c60:	00 91 f9 01 	lds	r16, 0x01F9
 c64:	20 91 f2 01 	lds	r18, 0x01F2
 c68:	40 91 f3 01 	lds	r20, 0x01F3
 c6c:	60 91 f4 01 	lds	r22, 0x01F4
 c70:	80 91 f5 01 	lds	r24, 0x01F5
 c74:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Nagruzka>


if (!(PINA&(1<<PA0)))
 c78:	c8 99       	sbic	0x19, 0	; 25
 c7a:	0f c0       	rjmp	.+30     	; 0xc9a <main+0x31a>
{
flag_del=1;
 c7c:	c0 93 f1 01 	sts	0x01F1, r28

LCDGotoXY(0,1);
 c80:	6c 2f       	mov	r22, r28
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("Motion!!");
 c88:	8e ec       	ldi	r24, 0xCE	; 206
 c8a:	91 e0       	ldi	r25, 0x01	; 1
 c8c:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
//функция управления задержкой включения освещения
Auto_Mode_On_Nag(flag_del);
 c90:	80 91 f1 01 	lds	r24, 0x01F1
 c94:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Auto_Mode_On_Nag>
 c98:	0d c0       	rjmp	.+26     	; 0xcb4 <main+0x334>
}
else{
LCDGotoXY(0,1);
 c9a:	6c 2f       	mov	r22, r28
 c9c:	80 e0       	ldi	r24, 0x00	; 0
 c9e:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("No Motion!!");
 ca2:	8b ec       	ldi	r24, 0xCB	; 203
 ca4:	91 e0       	ldi	r25, 0x01	; 1
 ca6:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
flag_del=0;
 caa:	10 92 f1 01 	sts	0x01F1, r1
Auto_Mode_On_Nag(flag_del);
 cae:	80 e0       	ldi	r24, 0x00	; 0
 cb0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Auto_Mode_On_Nag>
}

}
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

if (count_main_led==3)//режим сна
 cb4:	80 91 fa 01 	lds	r24, 0x01FA
 cb8:	83 30       	cpi	r24, 0x03	; 3
 cba:	31 f5       	brne	.+76     	; 0xd08 <main+0x388>
{
LCDGotoXY(8,2);
 cbc:	62 e0       	ldi	r22, 0x02	; 2
 cbe:	88 e0       	ldi	r24, 0x08	; 8
 cc0:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCD_write_int(house);
 cc4:	80 91 03 02 	lds	r24, 0x0203
 cc8:	90 91 04 02 	lds	r25, 0x0204
 ccc:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
LCDdata(':');
 cd0:	8a e3       	ldi	r24, 0x3A	; 58
 cd2:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
LCD_write_int(minuts);
 cd6:	80 91 05 02 	lds	r24, 0x0205
 cda:	90 91 06 02 	lds	r25, 0x0206
 cde:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
LCDdata(':');
 ce2:	8a e3       	ldi	r24, 0x3A	; 58
 ce4:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
LCD_write_int(second);
 ce8:	80 91 07 02 	lds	r24, 0x0207
 cec:	90 91 08 02 	lds	r25, 0x0208
 cf0:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>

Nagruzka(0,0,0,0,0,0,0,0);
 cf4:	a1 2c       	mov	r10, r1
 cf6:	c1 2c       	mov	r12, r1
 cf8:	e1 2c       	mov	r14, r1
 cfa:	00 e0       	ldi	r16, 0x00	; 0
 cfc:	20 e0       	ldi	r18, 0x00	; 0
 cfe:	40 e0       	ldi	r20, 0x00	; 0
 d00:	60 e0       	ldi	r22, 0x00	; 0
 d02:	80 e0       	ldi	r24, 0x00	; 0
 d04:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Nagruzka>



}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (count_main_led==4)//режим отключения системы
 d08:	80 91 fa 01 	lds	r24, 0x01FA
 d0c:	84 30       	cpi	r24, 0x04	; 4
 d0e:	91 f4       	brne	.+36     	; 0xd34 <main+0x3b4>
{
LCDGotoXY(5,1);
 d10:	6c 2f       	mov	r22, r28
 d12:	85 e0       	ldi	r24, 0x05	; 5
 d14:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("Power On!!");
 d18:	87 ed       	ldi	r24, 0xD7	; 215
 d1a:	91 e0       	ldi	r25, 0x01	; 1
 d1c:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
Nagruzka(0,0,0,0,0,0,0,0);
 d20:	a1 2c       	mov	r10, r1
 d22:	c1 2c       	mov	r12, r1
 d24:	e1 2c       	mov	r14, r1
 d26:	00 e0       	ldi	r16, 0x00	; 0
 d28:	20 e0       	ldi	r18, 0x00	; 0
 d2a:	40 e0       	ldi	r20, 0x00	; 0
 d2c:	60 e0       	ldi	r22, 0x00	; 0
 d2e:	80 e0       	ldi	r24, 0x00	; 0
 d30:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Nagruzka>

}
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

if (count_main_led==5)//режим управления с компьютера
 d34:	80 91 fa 01 	lds	r24, 0x01FA
 d38:	85 30       	cpi	r24, 0x05	; 5
 d3a:	09 f0       	breq	.+2      	; 0xd3e <main+0x3be>
 d3c:	3f ce       	rjmp	.-898    	; 0x9bc <main+0x3c>
{

LCDGotoXY(8,2);
 d3e:	62 e0       	ldi	r22, 0x02	; 2
 d40:	88 e0       	ldi	r24, 0x08	; 8
 d42:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCD_write_int(house);
 d46:	80 91 03 02 	lds	r24, 0x0203
 d4a:	90 91 04 02 	lds	r25, 0x0204
 d4e:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
LCDdata(':');
 d52:	8a e3       	ldi	r24, 0x3A	; 58
 d54:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
LCD_write_int(minuts);
 d58:	80 91 05 02 	lds	r24, 0x0205
 d5c:	90 91 06 02 	lds	r25, 0x0206
 d60:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>
LCDdata(':');
 d64:	8a e3       	ldi	r24, 0x3A	; 58
 d66:	0e 94 2a 01 	call	0x254	; 0x254 <LCDdata>
LCD_write_int(second);
 d6a:	80 91 07 02 	lds	r24, 0x0207
 d6e:	90 91 08 02 	lds	r25, 0x0208
 d72:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_write_int>


LCDGotoXY(5,1);
 d76:	6d 2f       	mov	r22, r29
 d78:	85 e0       	ldi	r24, 0x05	; 5
 d7a:	0e 94 3d 01 	call	0x27a	; 0x27a <LCDGotoXY>
LCDsendString("USART Mode!!");
 d7e:	82 ee       	ldi	r24, 0xE2	; 226
 d80:	91 e0       	ldi	r25, 0x01	; 1
 d82:	0e 94 4c 01 	call	0x298	; 0x298 <LCDsendString>
USART_Control(flg_control_USART);
 d86:	80 91 f0 01 	lds	r24, 0x01F0
 d8a:	0e 94 35 04 	call	0x86a	; 0x86a <USART_Control>
 d8e:	16 ce       	rjmp	.-980    	; 0x9bc <main+0x3c>

00000d90 <RTC_ConvertDEC>:
 #include "RTC_ds1307.h"

 unsigned char RTC_ConvertDEC(unsigned char c)
 {

 unsigned char ch=((c>>4)*10+(0b00001111&c));
 d90:	98 2f       	mov	r25, r24
 d92:	92 95       	swap	r25
 d94:	9f 70       	andi	r25, 0x0F	; 15
 d96:	99 0f       	add	r25, r25
 d98:	29 2f       	mov	r18, r25
 d9a:	22 0f       	add	r18, r18
 d9c:	22 0f       	add	r18, r18
 d9e:	92 0f       	add	r25, r18
 da0:	8f 70       	andi	r24, 0x0F	; 15
 return ch;
 }
 da2:	89 0f       	add	r24, r25
 da4:	08 95       	ret

00000da6 <USART_INIT>:
UCSRA=(1<<U2X);//установка двойной скорости
UBRRL=(F_CPU/(8UL*baud))-1;//вычисление скорости

#else

UBRRL = (F_CPU / (16UL * baud)) - 1;
 da6:	a0 e0       	ldi	r26, 0x00	; 0
 da8:	b0 e0       	ldi	r27, 0x00	; 0
 daa:	88 0f       	add	r24, r24
 dac:	99 1f       	adc	r25, r25
 dae:	aa 1f       	adc	r26, r26
 db0:	bb 1f       	adc	r27, r27
 db2:	88 0f       	add	r24, r24
 db4:	99 1f       	adc	r25, r25
 db6:	aa 1f       	adc	r26, r26
 db8:	bb 1f       	adc	r27, r27
 dba:	9c 01       	movw	r18, r24
 dbc:	ad 01       	movw	r20, r26
 dbe:	22 0f       	add	r18, r18
 dc0:	33 1f       	adc	r19, r19
 dc2:	44 1f       	adc	r20, r20
 dc4:	55 1f       	adc	r21, r21
 dc6:	22 0f       	add	r18, r18
 dc8:	33 1f       	adc	r19, r19
 dca:	44 1f       	adc	r20, r20
 dcc:	55 1f       	adc	r21, r21
 dce:	60 e0       	ldi	r22, 0x00	; 0
 dd0:	72 e1       	ldi	r23, 0x12	; 18
 dd2:	8a e7       	ldi	r24, 0x7A	; 122
 dd4:	90 e0       	ldi	r25, 0x00	; 0
 dd6:	0e 94 27 07 	call	0xe4e	; 0xe4e <__udivmodsi4>
 dda:	21 50       	subi	r18, 0x01	; 1
 ddc:	29 b9       	out	0x09, r18	; 9
#endif
UCSRB=(1<<TXEN)|(1<<RXEN);//разрешение на прием и передачу
 dde:	88 e1       	ldi	r24, 0x18	; 24
 de0:	8a b9       	out	0x0a, r24	; 10
UCSRB|=(1<<RXCIE);
 de2:	57 9a       	sbi	0x0a, 7	; 10
 de4:	08 95       	ret

00000de6 <USART_putc>:
}

void USART_putc(unsigned char data)//функция передачи символа
{
while (!( UCSRA & (1<<UDRE))); // ждем пока освободится регистр UDR
 de6:	5d 9b       	sbis	0x0b, 5	; 11
 de8:	fe cf       	rjmp	.-4      	; 0xde6 <USART_putc>
UDR = data;						   // начинаем передачу
 dea:	8c b9       	out	0x0c, r24	; 12
if (data!= 8)
 dec:	88 30       	cpi	r24, 0x08	; 8
 dee:	31 f0       	breq	.+12     	; 0xdfc <USART_putc+0x16>
cound_Send++; // увеличиваем счетчик отправленных символов
 df0:	80 91 09 02 	lds	r24, 0x0209
 df4:	8f 5f       	subi	r24, 0xFF	; 255
 df6:	80 93 09 02 	sts	0x0209, r24
 dfa:	08 95       	ret
else
cound_Send--; // если отослали backspace уменьшаем счетчик отправленных символов
 dfc:	80 91 09 02 	lds	r24, 0x0209
 e00:	81 50       	subi	r24, 0x01	; 1
 e02:	80 93 09 02 	sts	0x0209, r24
 e06:	08 95       	ret

00000e08 <USART_Write>:
return UDR;//возращаем данные

}

void USART_Write(char *str1)//запись строки символов
{
 e08:	cf 93       	push	r28
 e0a:	df 93       	push	r29
 e0c:	ec 01       	movw	r28, r24

for (int i=0;str1[i];i++)
 e0e:	88 81       	ld	r24, Y
 e10:	88 23       	and	r24, r24
 e12:	31 f0       	breq	.+12     	; 0xe20 <USART_Write+0x18>
 e14:	21 96       	adiw	r28, 0x01	; 1
{
USART_putc(str1[i]);
 e16:	0e 94 f3 06 	call	0xde6	; 0xde6 <USART_putc>
}

void USART_Write(char *str1)//запись строки символов
{

for (int i=0;str1[i];i++)
 e1a:	89 91       	ld	r24, Y+
 e1c:	81 11       	cpse	r24, r1
 e1e:	fb cf       	rjmp	.-10     	; 0xe16 <USART_Write+0xe>
{
USART_putc(str1[i]);
}

}
 e20:	df 91       	pop	r29
 e22:	cf 91       	pop	r28
 e24:	08 95       	ret

00000e26 <__divmodhi4>:
 e26:	97 fb       	bst	r25, 7
 e28:	07 2e       	mov	r0, r23
 e2a:	16 f4       	brtc	.+4      	; 0xe30 <__divmodhi4+0xa>
 e2c:	00 94       	com	r0
 e2e:	07 d0       	rcall	.+14     	; 0xe3e <__divmodhi4_neg1>
 e30:	77 fd       	sbrc	r23, 7
 e32:	09 d0       	rcall	.+18     	; 0xe46 <__divmodhi4_neg2>
 e34:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__udivmodhi4>
 e38:	07 fc       	sbrc	r0, 7
 e3a:	05 d0       	rcall	.+10     	; 0xe46 <__divmodhi4_neg2>
 e3c:	3e f4       	brtc	.+14     	; 0xe4c <__divmodhi4_exit>

00000e3e <__divmodhi4_neg1>:
 e3e:	90 95       	com	r25
 e40:	81 95       	neg	r24
 e42:	9f 4f       	sbci	r25, 0xFF	; 255
 e44:	08 95       	ret

00000e46 <__divmodhi4_neg2>:
 e46:	70 95       	com	r23
 e48:	61 95       	neg	r22
 e4a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e4c <__divmodhi4_exit>:
 e4c:	08 95       	ret

00000e4e <__udivmodsi4>:
 e4e:	a1 e2       	ldi	r26, 0x21	; 33
 e50:	1a 2e       	mov	r1, r26
 e52:	aa 1b       	sub	r26, r26
 e54:	bb 1b       	sub	r27, r27
 e56:	fd 01       	movw	r30, r26
 e58:	0d c0       	rjmp	.+26     	; 0xe74 <__udivmodsi4_ep>

00000e5a <__udivmodsi4_loop>:
 e5a:	aa 1f       	adc	r26, r26
 e5c:	bb 1f       	adc	r27, r27
 e5e:	ee 1f       	adc	r30, r30
 e60:	ff 1f       	adc	r31, r31
 e62:	a2 17       	cp	r26, r18
 e64:	b3 07       	cpc	r27, r19
 e66:	e4 07       	cpc	r30, r20
 e68:	f5 07       	cpc	r31, r21
 e6a:	20 f0       	brcs	.+8      	; 0xe74 <__udivmodsi4_ep>
 e6c:	a2 1b       	sub	r26, r18
 e6e:	b3 0b       	sbc	r27, r19
 e70:	e4 0b       	sbc	r30, r20
 e72:	f5 0b       	sbc	r31, r21

00000e74 <__udivmodsi4_ep>:
 e74:	66 1f       	adc	r22, r22
 e76:	77 1f       	adc	r23, r23
 e78:	88 1f       	adc	r24, r24
 e7a:	99 1f       	adc	r25, r25
 e7c:	1a 94       	dec	r1
 e7e:	69 f7       	brne	.-38     	; 0xe5a <__udivmodsi4_loop>
 e80:	60 95       	com	r22
 e82:	70 95       	com	r23
 e84:	80 95       	com	r24
 e86:	90 95       	com	r25
 e88:	9b 01       	movw	r18, r22
 e8a:	ac 01       	movw	r20, r24
 e8c:	bd 01       	movw	r22, r26
 e8e:	cf 01       	movw	r24, r30
 e90:	08 95       	ret

00000e92 <__tablejump2__>:
 e92:	ee 0f       	add	r30, r30
 e94:	ff 1f       	adc	r31, r31
 e96:	05 90       	lpm	r0, Z+
 e98:	f4 91       	lpm	r31, Z
 e9a:	e0 2d       	mov	r30, r0
 e9c:	09 94       	ijmp

00000e9e <__udivmodhi4>:
 e9e:	aa 1b       	sub	r26, r26
 ea0:	bb 1b       	sub	r27, r27
 ea2:	51 e1       	ldi	r21, 0x11	; 17
 ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <__udivmodhi4_ep>

00000ea6 <__udivmodhi4_loop>:
 ea6:	aa 1f       	adc	r26, r26
 ea8:	bb 1f       	adc	r27, r27
 eaa:	a6 17       	cp	r26, r22
 eac:	b7 07       	cpc	r27, r23
 eae:	10 f0       	brcs	.+4      	; 0xeb4 <__udivmodhi4_ep>
 eb0:	a6 1b       	sub	r26, r22
 eb2:	b7 0b       	sbc	r27, r23

00000eb4 <__udivmodhi4_ep>:
 eb4:	88 1f       	adc	r24, r24
 eb6:	99 1f       	adc	r25, r25
 eb8:	5a 95       	dec	r21
 eba:	a9 f7       	brne	.-22     	; 0xea6 <__udivmodhi4_loop>
 ebc:	80 95       	com	r24
 ebe:	90 95       	com	r25
 ec0:	bc 01       	movw	r22, r24
 ec2:	cd 01       	movw	r24, r26
 ec4:	08 95       	ret

00000ec6 <__itoa_ncheck>:
 ec6:	bb 27       	eor	r27, r27
 ec8:	4a 30       	cpi	r20, 0x0A	; 10
 eca:	31 f4       	brne	.+12     	; 0xed8 <__itoa_ncheck+0x12>
 ecc:	99 23       	and	r25, r25
 ece:	22 f4       	brpl	.+8      	; 0xed8 <__itoa_ncheck+0x12>
 ed0:	bd e2       	ldi	r27, 0x2D	; 45
 ed2:	90 95       	com	r25
 ed4:	81 95       	neg	r24
 ed6:	9f 4f       	sbci	r25, 0xFF	; 255
 ed8:	0c 94 6f 07 	jmp	0xede	; 0xede <__utoa_common>

00000edc <__utoa_ncheck>:
 edc:	bb 27       	eor	r27, r27

00000ede <__utoa_common>:
 ede:	fb 01       	movw	r30, r22
 ee0:	55 27       	eor	r21, r21
 ee2:	aa 27       	eor	r26, r26
 ee4:	88 0f       	add	r24, r24
 ee6:	99 1f       	adc	r25, r25
 ee8:	aa 1f       	adc	r26, r26
 eea:	a4 17       	cp	r26, r20
 eec:	10 f0       	brcs	.+4      	; 0xef2 <__utoa_common+0x14>
 eee:	a4 1b       	sub	r26, r20
 ef0:	83 95       	inc	r24
 ef2:	50 51       	subi	r21, 0x10	; 16
 ef4:	b9 f7       	brne	.-18     	; 0xee4 <__utoa_common+0x6>
 ef6:	a0 5d       	subi	r26, 0xD0	; 208
 ef8:	aa 33       	cpi	r26, 0x3A	; 58
 efa:	08 f0       	brcs	.+2      	; 0xefe <__utoa_common+0x20>
 efc:	a9 5d       	subi	r26, 0xD9	; 217
 efe:	a1 93       	st	Z+, r26
 f00:	00 97       	sbiw	r24, 0x00	; 0
 f02:	79 f7       	brne	.-34     	; 0xee2 <__utoa_common+0x4>
 f04:	b1 11       	cpse	r27, r1
 f06:	b1 93       	st	Z+, r27
 f08:	11 92       	st	Z+, r1
 f0a:	cb 01       	movw	r24, r22
 f0c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <strrev>

00000f10 <strrev>:
 f10:	dc 01       	movw	r26, r24
 f12:	fc 01       	movw	r30, r24
 f14:	67 2f       	mov	r22, r23
 f16:	71 91       	ld	r23, Z+
 f18:	77 23       	and	r23, r23
 f1a:	e1 f7       	brne	.-8      	; 0xf14 <strrev+0x4>
 f1c:	32 97       	sbiw	r30, 0x02	; 2
 f1e:	04 c0       	rjmp	.+8      	; 0xf28 <strrev+0x18>
 f20:	7c 91       	ld	r23, X
 f22:	6d 93       	st	X+, r22
 f24:	70 83       	st	Z, r23
 f26:	62 91       	ld	r22, -Z
 f28:	ae 17       	cp	r26, r30
 f2a:	bf 07       	cpc	r27, r31
 f2c:	c8 f3       	brcs	.-14     	; 0xf20 <strrev+0x10>
 f2e:	08 95       	ret

00000f30 <_exit>:
 f30:	f8 94       	cli

00000f32 <__stop_program>:
 f32:	ff cf       	rjmp	.-2      	; 0xf32 <__stop_program>
